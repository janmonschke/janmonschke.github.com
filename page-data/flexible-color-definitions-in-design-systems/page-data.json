{"componentChunkName":"component---src-templates-blog-post-js","path":"/flexible-color-definitions-in-design-systems","result":{"data":{"site":{"siteMetadata":{"title":"Jan Monschke","author":"Jan Monschke"}},"markdownRemark":{"id":"3d06ee13-72e2-57e0-bfec-3dadd4af914b","excerpt":"While working on the implementation of a new design system at work, I came across this nifty little trick that makes color definitions more usable and flexible‚Ä¶","html":"<p>While working on the implementation of a new design system at work, I came across this nifty little trick that makes color definitions more usable and flexible.</p>\n<p>Let‚Äôs say our task is to build a <code class=\"language-text\">LinkButton</code> component. A component that looks like a button but it is actually a link. The component‚Äôs background should be <code class=\"language-text\">space green</code> from our list of theme colors:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--colors-space-green</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">,</span> 227<span class=\"token punctuation\">,</span> 211<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--surface-primary-button</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--colors-space-green<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.ButtonLink</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--surface-primary-button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This results in the following component component:</p>\n<p><a href=\"#\" class=\"ButtonLink\" onclick=\"return false;\">ButtonLink</a></p>\n<p>The design spec specifies, that the background should have <code class=\"language-text\">50%</code> opacity when the element is hovered. So we‚Äôre adding an additional opacity rule:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.ButtonLink:hover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0.5<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When hovered, the component‚Äôs background changes correctly. However, the text becomes a lot less readable because <code class=\"language-text\">opacity</code> is applied to the entire element which includes its child elements:</p>\n<p><a href=\"#\" class=\"ButtonLink1\" onclick=\"return false;\">ButtonLink</a></p>\n<p>Not only is this bad for the readbility, it‚Äôs also not correct according to the design spec which only specifies a change in opacity for the background. The text should keep its original color.</p>\n<p>Instinctively I want to solve this issue by defining a new variable <code class=\"language-text\">colors-space-green-opacity-50</code> that is a <code class=\"language-text\">rgba()</code> copy of the original color. That color is then used as the background color for the hovered button. That is a valid approach and gets you to the solution quickly.</p>\n<p>Another approach is to define the ‚Äúraw‚Äù RGB values of <code class=\"language-text\">space green</code> as their own variable and use that variable for the base color definition and the hover color. Let me show you what I mean by ‚Äúraw‚Äù RGB values:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--colors-space-green-rgb</span><span class=\"token punctuation\">:</span> 3<span class=\"token punctuation\">,</span> 227<span class=\"token punctuation\">,</span> 211<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--colors-space-green</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--colors-space-green-rgb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The definition of <code class=\"language-text\">--colors-space-green-rgb</code> might look incomplete and invalid but it is actually a valid definition of a custom property. Custom properties are replaced <strong>as is</strong>. <code class=\"language-text\">rgb(var(--colors-space-green-rgb))</code> is interpreted as <code class=\"language-text\">rgb(3, 227, 211)</code> which in turn is identical to our initial color definition of <code class=\"language-text\">space green</code>.</p>\n<p>This now allows us to define a hover version of the background color that depends on the base color definition:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--surface-primary-button-50</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--colors-space-green-rgb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 0.5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.ButtonLink:hover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--surface-primary-button-50<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Et voil√†, our <code class=\"language-text\">ButtonLink</code> now behaves correctly and it will automatically update when we change the base color definition üéâ:</p>\n<p><a href=\"#\" class=\"ButtonLink2\" onclick=\"return false;\">ButtonLink</a></p>\n<p>I like this approach as it gives a lot of flexibility and aids with maintainability.</p>\n<style>\n  /* Initial approach */\n  :root {\n    --colors-space-green: rgb(3, 227, 211);\n\n    --surface-primary-button: var(--colors-space-green);\n  }\n\n  .ButtonLink, .ButtonLink1 {\n    background: var(--surface-primary-button);\n  }\n  .ButtonLink1:hover {\n    opacity: 0.5;\n  }\n\n  /* RGB variable approach */\n  :root {\n    --colors-space-green-rgb: 3, 227, 211;\n    --colors-space-green-2: var(--colors-space-green-rgb);\n\n    --surface-primary-button-2: rgb(var(--colors-space-green-2)); /* Excuse my bad naming here */\n    --surface-primary-button-50: rgba(var(--colors-space-green-rgb), 0.5);\n  }\n\n  .ButtonLink2 {\n    background: var(--surface-primary-button-2);\n  }\n\n  .ButtonLink2:hover {\n    background: var(--surface-primary-button-50);\n  }\n\n  .ButtonLink, .ButtonLink1, .ButtonLink2 {\n    color: black;\n    margin: 0.5em;\n    text-decoration: none;\n    padding: 1em;\n    border-radius: 15px;\n  }\n</style>","frontmatter":{"title":"Flexible color definitions in design systems","type":"blog","date":"May 19, 2021","pomodoros":4,"keywords":["design","system","color","pattern","css","variables"],"image":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#387888","images":{"fallback":{"src":"/static/645761db1e60f81a0009064e1a780d6d/3b307/color-splash.jpg","srcSet":"/static/645761db1e60f81a0009064e1a780d6d/3b307/color-splash.jpg 800w","sizes":"800px"},"sources":[{"srcSet":"/static/645761db1e60f81a0009064e1a780d6d/89c0d/color-splash.webp 800w","type":"image/webp","sizes":"800px"}]},"width":800,"height":533}}}}},"webmentions":{"edges":[]},"likes":{"edges":[{"node":{"author":{"name":"Gerrit Kaiser","photo":"https://webmention.io/avatar/pbs.twimg.com/efd0390215702c4c55d3e2c2226a5a18b39bbc6fc32152c36a853f466952d444.jpg","url":"https://twitter.com/gerrit"},"id":"ab3d364e-c842-5923-8727-d0a1f980fc4c"}},{"node":{"author":{"name":"gibber","photo":"https://webmention.io/avatar/pbs.twimg.com/df68006b1f920ad744c03ae0ae0f2a7c6f7b54a368001c51eb017c93e8d5ea2d.png","url":"https://twitter.com/gibber_cc"},"id":"acbb88e0-96b1-5656-af28-e35fce2cc4ab"}},{"node":{"author":{"name":"David Heidrich","photo":"https://webmention.io/avatar/pbs.twimg.com/31c03c80db185540a2b48c37f839a8f710ec5b5e46881406a8631a1142963caa.jpg","url":"https://twitter.com/BowlingX"},"id":"5845be8e-b5f3-5006-89a2-83799c603828"}}]}},"pageContext":{"slug":"/flexible-color-definitions-in-design-systems","publicUrl":"https://janmonschke.com/flexible-color-definitions-in-design-systems/","previous":{"fields":{"slug":"/setting-up-tailwindcss-in-create-react-app"},"frontmatter":{"title":"Setting up TailwindCSS in create-react-app","type":"blog"}},"next":{"fields":{"slug":"/building-a-gpx-editor-with-xstate-and-lit-html"},"frontmatter":{"title":"Building a gpx editor with xstate and lit-html","type":"blog"}}}},"staticQueryHashes":["1677560032","3729604799"]}