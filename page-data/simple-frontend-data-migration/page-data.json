{"componentChunkName":"component---src-templates-blog-post-js","path":"/simple-frontend-data-migration","result":{"data":{"site":{"siteMetadata":{"title":"Jan Monschke","author":"Jan Monschke"}},"markdownRemark":{"id":"365ccb8a-32bb-5a3a-9a2d-fcd30bbb7a66","excerpt":"If you work on a JavaScript application that stores data locally, think of  on the web or  in React Native, you might have found yourself in the situation where…","html":"<p>If you work on a JavaScript application that stores data locally, think of <code class=\"language-text\">localStorage</code> on the web or <code class=\"language-text\">AsyncStorage</code> in React Native, you might have found yourself in the situation where you want to change the shape of the stored data.</p>\n<p>This on its own does not seem like an impossible task but it can get quite complex over time. You have to make sure to build a system that correctly identifies the version of the local data and that correctly migrates all the different versions to the latest versions. Users might come back to your site/app after 6 months, and might have missed several migrations in the meantime.</p>\n<p>Let’s look at an example to show you what I mean.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// This is the initial shape of your data</span>\n<span class=\"token keyword\">const</span> v0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Test'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">'User'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// At some point you change it to this shape</span>\n<span class=\"token keyword\">const</span> v1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> <span class=\"token string\">'Test'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">last</span><span class=\"token operator\">:</span> <span class=\"token string\">'User'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Your migration function might look sth like this</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">migrate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>oldData <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>oldData<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    newData<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> newData<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">last</span><span class=\"token operator\">:</span> newData<span class=\"token punctuation\">.</span>lastName\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> newData<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> newData<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> newData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So far so good, you have successfully migrated your client data from <code class=\"language-text\">v0</code> to <code class=\"language-text\">v1</code>. Now let’s add a <code class=\"language-text\">v2</code> to make things interesting.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// We rename `name` to `info`</span>\n<span class=\"token keyword\">const</span> v2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">info</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> <span class=\"token string\">'Test'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">last</span><span class=\"token operator\">:</span> <span class=\"token string\">'User'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Let's extend our migrate function so it</span>\n<span class=\"token comment\">// supports v0 and v1 migrations</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">migrate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>oldData <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// v0 migration</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newData<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// make sure it does not crash when</span>\n    <span class=\"token comment\">// v2 data is passed</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newData<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      newData<span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> newData<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">last</span><span class=\"token operator\">:</span> newData<span class=\"token punctuation\">.</span>lastName\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">delete</span> newData<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">delete</span> newData<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newData<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// v1 migration</span>\n    newData<span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>newData<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> newData<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> newData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Looking at our migration function we can see that after two relatively simple migrations its complexity has grown a lot already. It now has to detect the shape of <code class=\"language-text\">v0</code> by checking that the <code class=\"language-text\">name</code> key is not present. It detects <code class=\"language-text\">v1</code> by checking that <code class=\"language-text\">name</code> is present. The logic is already quite hard to make sense of and it requires us to add code comments to be able to understand the code in the future.</p>\n<p>What’s worse though is that we have to add special code so the migrations does not crash, when called with an already migrated object. 😱</p>\n<p>Also, imagine we want to use the <code class=\"language-text\">name</code> key again for storing other data. At that point we cannot use it to detect versions anymore, and we have to come up with even more complex logic to migrate our data. With every change of the migration function we also have to consider that not all users have migrated to the newest version and it has to support migrations of all the different versions of data that are out there, from the first version of our data, to the latest version of our data. 🤯</p>\n<h2>Versioning local data</h2>\n<p>One fix for this is to add a <code class=\"language-text\">version</code> field to our local data, either from the beginning or from the point on where you are writing your first migration. We will use this field to correctly identify the version of the local data and to split up the complexity of our migration function into smaller functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// An object with all available version identifiers</span>\n<span class=\"token keyword\">const</span> Versions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">one</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">two</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">three</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// An object containing all available migrations</span>\n<span class=\"token comment\">// The key represents an available migration for the</span>\n<span class=\"token comment\">// versioned data at that version.</span>\n<span class=\"token comment\">// Each value is a function that migrates a version to</span>\n<span class=\"token comment\">// the next higher version.</span>\n<span class=\"token keyword\">const</span> migrations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Versions<span class=\"token punctuation\">.</span>one<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token parameter\">v1Data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> v1Data<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">last</span><span class=\"token operator\">:</span> v1Data<span class=\"token punctuation\">.</span>lastName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> Versions<span class=\"token punctuation\">.</span>two\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>Versions<span class=\"token punctuation\">.</span>two<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token parameter\">v2Data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">info</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>v2Data<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> Versions<span class=\"token punctuation\">.</span>three\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Looks at the version of the data and recursively</span>\n<span class=\"token comment\">// calls `migrate` until there are no more migrations</span>\n<span class=\"token comment\">// available.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">migrate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> migrationFn <span class=\"token operator\">=</span> migrations<span class=\"token punctuation\">[</span>input<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>migrationFn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">migrate</span><span class=\"token punctuation\">(</span>migrations<span class=\"token punctuation\">[</span>input<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> oldData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> Versions<span class=\"token punctuation\">.</span>one<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Test'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">'User'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Outputs the migrated data at version 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'migrated'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">migrate</span><span class=\"token punctuation\">(</span>oldData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let’s compare the complexity of the functions in the <code class=\"language-text\">migrations</code> object above to the <code class=\"language-text\">migrate</code> function that we were looking at before. By breaking down the function into several smaller chunks, it becomes much simpler to maintain migrations over time because you will only ever have to think about one migration at a time. That also means, you can now test each migration step in isolation. 🎉</p>\n<p>The <code class=\"language-text\">migrate</code> function executes each of these functions in the correct order, until there are no more migrations available and when it reaches that point, your data is migrated. It is required, that you keep the <code class=\"language-text\">Versions</code> and the <code class=\"language-text\">migrations</code> object in sync with your underlying data structure every time you update it. 😉</p>\n<p>In this example, the migration approach is only applied to simple migrations to make it easier to explain. The approach does scale to more complex operations as well. You might organize your frontend data in a more complex <code class=\"language-text\">IndexedDB</code> schema instead of stuffing it all in one giant object. Since you have full control over when and how to call your migrations functions it is possible to have could have different migrations for different shapes of data and to run them on a larger set of objects.</p>\n<p>I hope this little piece of code is helpful for you now or in future projects. It has helped me a lot in my side projects. 🎉</p>","frontmatter":{"title":"Simple frontend data migration","type":"blog","date":"December 12, 2019","pomodoros":5,"keywords":["frontend","data migration","JavaScript","React Native"],"image":null}},"webmentions":{"edges":[]},"likes":{"edges":[{"node":{"author":{"name":"chrisguttandin","photo":"https://webmention.io/avatar/abs.twimg.com/0e6b2cd70aa5b35dec24ca4e1e63f8963f0118736d9ec3bba77e3a8c99a27bc2.png","url":"https://twitter.com/chrisguttandin"},"id":"45af82bc-9125-574e-acc4-8a1d76e54ee9"}},{"node":{"author":{"name":"fredrik wallberg","photo":"https://webmention.io/avatar/pbs.twimg.com/decc427ff7676d56809260b0eb2239ca48f7b0190e2fbee44372c181b1fbc63a.jpg","url":"https://twitter.com/quesebifurcan"},"id":"5c6a595f-46a7-591d-888d-504e4d123686"}},{"node":{"author":{"name":"Can Göktas","photo":"https://webmention.io/avatar/pbs.twimg.com/0eb9ec6434a2f51db1d1c51e8b6ccb0f6ca17c6f6cc70059325b5df4a951f0d5.jpg","url":"https://twitter.com/cangoektas"},"id":"bf0841c9-28ad-5ad1-8ff9-0257a35f9080"}},{"node":{"author":{"name":"Martin Stadler","photo":"https://webmention.io/avatar/pbs.twimg.com/76b5b3bcd42e57095eac928e1f8d54d0ccdbc6ec2e9f30802c2fc7cfcc3c5762.jpeg","url":"https://twitter.com/xMartin"},"id":"e44866d2-b2a8-5421-bbcb-a5cfe4fdd287"}},{"node":{"author":{"name":"Sasha K","photo":"https://webmention.io/avatar/pbs.twimg.com/0959c64dbbe010a9916983c1778b91d07feaa1a919f7221ce002f6343cee00f7.jpg","url":"https://twitter.com/a_kovalev"},"id":"5ff11996-9878-5515-b6b5-2b6218076142"}},{"node":{"author":{"name":"Márton Salomváry","photo":"https://webmention.io/avatar/pbs.twimg.com/160bac451ef53cd3827333a02129ee81c2041147ca4efdf65c1201b373fadf3b.jpg","url":"https://twitter.com/salomvary"},"id":"e75905fe-bca6-59d4-a8d5-36b48de05e21"}}]}},"pageContext":{"slug":"/simple-frontend-data-migration","publicUrl":"https://janmonschke.com/simple-frontend-data-migration/","previous":{"fields":{"slug":"/favorite-tech-podcasts-2019"},"frontmatter":{"title":"My favorite (tech) podcasts","type":"blog"}},"next":{"fields":{"slug":"/setting-up-tailwindcss-in-create-react-app"},"frontmatter":{"title":"Setting up TailwindCSS in create-react-app","type":"blog"}}}},"staticQueryHashes":["1677560032","3729604799"]}