<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog posts - janmonschke.com]]></title><description><![CDATA[The portfolio and blog of Jan Monschke]]></description><link>https://janmonschke.com</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 01 Mar 2023 20:30:46 GMT</lastBuildDate><item><title><![CDATA[Adding webmentions to your static blog]]></title><description><![CDATA[This blog used to have comments. There was a time when you could find a comment form under each post. The form was provided through a third…]]></description><link>https://janmonschke.com/adding-webmentions-to-your-static-blog</link><guid isPermaLink="false">https://janmonschke.com/adding-webmentions-to-your-static-blog</guid><pubDate>Mon, 30 Jan 2023 00:00:00 GMT</pubDate><content:encoded>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/42e16455d593291331762856f5557ac3/507e6/webmentions_header_alternative.webp 200w,
https://janmonschke.com/static/42e16455d593291331762856f5557ac3/28a80/webmentions_header_alternative.webp 400w,
https://janmonschke.com/static/42e16455d593291331762856f5557ac3/8d2ea/webmentions_header_alternative.webp 800w,
https://janmonschke.com/static/42e16455d593291331762856f5557ac3/6c7d1/webmentions_header_alternative.webp 960w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/42e16455d593291331762856f5557ac3/37402/webmentions_header_alternative.jpg 200w,
https://janmonschke.com/static/42e16455d593291331762856f5557ac3/4cda9/webmentions_header_alternative.jpg 400w,
https://janmonschke.com/static/42e16455d593291331762856f5557ac3/c60e9/webmentions_header_alternative.jpg 800w,
https://janmonschke.com/static/42e16455d593291331762856f5557ac3/1fe05/webmentions_header_alternative.jpg 960w&quot; sizes=&quot;&quot; type=&quot;image/jpeg&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/42e16455d593291331762856f5557ac3/c60e9/webmentions_header_alternative.jpg&quot; alt=&quot;webmentions header alternative&quot; title=&quot;webmentions header alternative&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;This blog used to have comments. There was a time when you could find a comment form under each post. The form was provided through a third-party embed of course, since this is a static site. There is no server or no database that could hold on to your comments.&lt;/p&gt;
&lt;p&gt;After a couple of years I decided to remove the comment form since it wasn’t really used and most discussions happened on social media anyways. Sadly there was no (sensible / easy) way to bring those discussion here without embedding tons of external code.&lt;/p&gt;
&lt;p&gt;But when I was reading &lt;a href=&quot;https://localghost.dev/blog/2022-the-year-in-lists/&quot;&gt;Sophie’s&lt;/a&gt; and &lt;a href=&quot;https://andy-bell.co.uk/wrapping-up-2022/&quot;&gt;Andy’s&lt;/a&gt; blog posts, I noticed that they contained comments and likes from social media sites without a third-party embed. So I went on a journey to understand how that integration works and how to bring it to my own blog as well.&lt;/p&gt;
&lt;h2&gt;What are webmentions?&lt;/h2&gt;
&lt;p&gt;These blogs are using &lt;a href=&quot;https://en.wikipedia.org/wiki/Webmention&quot;&gt;webmentions&lt;/a&gt; to gather mentions/likes/reposts from all over the internet. Webmentions are a (recommended) standard that allows sites to notify other sites that they’re linking to them.&lt;/p&gt;
&lt;div style=&quot;width: 60%; margin: 0 auto;&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/26d947f0bdd8ec15308b6081c2f9720b/webmentions_diagram.svg&quot; alt=&quot;Site A publishes a blog post mentioning your site. This generates a webmention.&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The way this works is that site A defines a &lt;code class=&quot;language-text&quot;&gt;webmention&lt;/code&gt; API endpoint as a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;link /&amp;gt;&lt;/code&gt; and site B, e.g. when a new blog post is created, looks at its external links, checks if they support webmentions and when they do, calls their webmention endpoint. That call contains the source of the link and the type of that link amongst more metadata like the date (types will be explained later).&lt;/p&gt;
&lt;p&gt;Webmentions are a great system, but they do not really work for static sites like this one. There is no server, so no webmention endpoint. Luckily, there are services that will collect webmentions on your behalf so you can fetch them later on. One of those services is &lt;a href=&quot;https://webmention.io&quot;&gt;webmention.io&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;webmention.io&lt;/h3&gt;
&lt;p&gt;After signing up on the site, it provides you with a webmention endpoint that you can add to your site:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;webmention&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://webmention.io/janmonschke.com/webmention&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add that to your site’s &lt;code class=&quot;language-text&quot;&gt;&amp;lt;head/&amp;gt;&lt;/code&gt; and other sites can immediately start sending mentions of your site to webmention.io.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/0c747f7efd9aa0b516aa638b98953ece/webmention_io_diagram.svg&quot; alt=&quot;webmention.io collects webmentions for your site from external sites&quot;&gt;&lt;/p&gt;
&lt;p&gt;The collected webmentions can be queried through webmention.io’s API. And when there’s an API, there’s a way to embed those mentions onto my blog. That’s great!&lt;/p&gt;
&lt;p&gt;But! &lt;em&gt;There had to be a but, of course.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;My initial problem was that discussions were happening on social media. Social media sites do sadly not send webmentions. Neither Twitter, nor Mastodon&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. So how do the sites mentioned above get their likes and mentions from social media?&lt;/p&gt;
&lt;h3&gt;brid.gy&lt;/h3&gt;
&lt;p&gt;Of course there is another service that solves this problem: &lt;a href=&quot;https://brid.gy/&quot;&gt;brid.gy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/405b8eedfa13ddf24b98b87c591e0fb8/bridgy_diagram.svg&quot; alt=&quot;Bridgy sits in between social media sites and your webmentions&quot;&gt;&lt;/p&gt;
&lt;p&gt;Brid.gy connects mentions, likes, reposts etc. from social media sites to your site. It basically works as an automated social media search for mentions for your site and it then converts those mentions / reactions into webmentions.&lt;/p&gt;
&lt;div style=&quot;width: 60%; margin: 0 auto;&quot;&gt;
&lt;p&gt;&lt;img src=&quot;/4627032ef666b1cca642659819db2806/bridgy_site_crawl_diagram.svg&quot; alt=&quot;Bridgy crawls your site for mentions of other sites that use webmentions&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Even better, brid.gy also acts as webmention “notifier” for your site. It periodically crawls your site for mentions of other sites and it will then create webmentions for those sites. It’s such a helpful service. This allows static sites to act like proper players in the webmention/indieweb game.&lt;/p&gt;
&lt;p&gt;A final cool feature, and I promise I will then stop praising brid.gy so much. Brid.gy can also scan your old social media posts and create mentions for those. Meaning you can collect likes as webmentions from previously when you weren’t using brid.gy and webmention.io yet. Backfeeding of mentions is limited to likes and reposts though&lt;sup id=&quot;fnref-2&quot;&gt;&lt;a href=&quot;#fn-2&quot; class=&quot;footnote-ref&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2&gt;Bringing webmentions to your static site&lt;/h2&gt;
&lt;p&gt;Now, how are we going to bring webmentions to our static site? There are two ways of how to use webmentions in your static site that I will explain in this post.&lt;/p&gt;
&lt;p&gt;The first one is the simplest one and, apart from setting up webmention.io and brid.gy, requires pretty much no extra setup. The second one is a bit more involved and requires GitHub actions, a proper integration into Gatsby’s GraphQL layer and, optionally, setting up a webhook for your Github actions (most of that flow will also work for other static site generators).&lt;/p&gt;
&lt;p&gt;The first approach is perfect for your if you quickly want to see how webmentions will look like on your site. However, I recommend going with the second approach (if possible). It has the advantage of owning your mentions. It’s more resilient to outages and shutdowns of the third-party sites you rely on and your site will load faster. It is also more flexible, as we’ll see later on.&lt;/p&gt;
&lt;h3&gt;Fetching webmentions on-demand&lt;/h3&gt;
&lt;p&gt;The simplest way to show webmentions is to fetch them on the client-side from webmention.io.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Webmentions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; postUrl &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;mentions&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setMentions&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;https://webmention.io/api/mentions.jf2?target=&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; postUrl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;mentionsJson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setMentions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mentionsJson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;mentions &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; mentions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;aside&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;mentions
          &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;wm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;in-reply-to&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;mention-of&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wm&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;wm-property&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;mention&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;li key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;mention&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
              @&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;mention&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;mention&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;aside&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This piece of code&lt;sup id=&quot;fnref-3&quot;&gt;&lt;a href=&quot;#fn-3&quot; class=&quot;footnote-ref&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; will render a list of all webmentions for the given post on your site. Each mention will contain the user’s name and their message like so:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;@Jeremy: I found this really cool blog post by Ada adas.site/webmentions-explained&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The webmention object has a lot more properties that we are not using in this example but you might want to check them out for your use-case (e.g. a link back to the author at &lt;code class=&quot;language-text&quot;&gt;author.url&lt;/code&gt;, the author’s profile pic &lt;code class=&quot;language-text&quot;&gt;author.photo&lt;/code&gt; or a link back to the original post &lt;code class=&quot;language-text&quot;&gt;mention.url&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This component can be placed anywhere on a blog post or any other site. Its only parameter is &lt;code class=&quot;language-text&quot;&gt;postUrl&lt;/code&gt; which is the public url of the page you want to fetch webmentions for (e.g. &lt;code class=&quot;language-text&quot;&gt;https://adas.site/webmentions-explained/&lt;/code&gt;). This url is the one that you or other users post on social media or their webmention-enabled blog. &lt;strong&gt;Brid.gy&lt;/strong&gt; and &lt;strong&gt;webmention.io&lt;/strong&gt; will use that public url to send and store your mentions.&lt;/p&gt;
&lt;p&gt;If we have another look at where the code iterates over the mentions, you’ll find that we are filtering the mentions based on their &lt;code class=&quot;language-text&quot;&gt;wm-property&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;mentions
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;wm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;in-reply-to&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;mention-of&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wm&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;wm-property&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are doing this in order to only show replies or mentions of our post. Other types of webmentions do not include &lt;code class=&quot;language-text&quot;&gt;content&lt;/code&gt;, so the code above would not work. Other types include &lt;code class=&quot;language-text&quot;&gt;like-of&lt;/code&gt; for likes of your post and &lt;code class=&quot;language-text&quot;&gt;repost-of&lt;/code&gt; for reposts of your post. A full list of the supported values of &lt;code class=&quot;language-text&quot;&gt;wm-property&lt;/code&gt; can be found in the &lt;a href=&quot;https://github.com/aaronpk/webmention.io#find-links-of-a-specific-type-to-a-specific-page&quot;&gt;webmention.io documention&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is generally a good idea to group webmentions by type and show them in distinct lists. For example a simpler list of likes and more complex list for actuall mentions with content. But feel free to integrate all types in the same list. There are no rules and the world is your oyster!&lt;/p&gt;
&lt;p&gt;This approach is pretty simple but has some disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It makes an extra request for each user visiting the page&lt;/li&gt;
&lt;li&gt;When webmention.io is down, your mentions (and likes etc.) won’t load&lt;/li&gt;
&lt;li&gt;In case webmention.io shuts down, you lose all your webmentions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Owning your webmentions and building them statically&lt;/h3&gt;
&lt;p&gt;The approach that I took for webmentions on this site makes sure that webmentions are checked into GitHub. This makes them resilient to issues with third-party webmention providers and it allows to build them statically. Meaning we don’t need to make an additional request, yay 🎉&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This approach is influenced by &lt;a href=&quot;https://sebastiandedeyne.com/webmentions-on-a-static-site-with-github-actions/&quot;&gt;Sebastian De Deyne’s webmention integration&lt;/a&gt;. Instead of integrating webmentions into Hugo, I’m explaining here how to integrate them into Gatsby. There are already Gatsby plugins for webmentions but they load them dynamically and not statically.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Synchronizing webmentions into your GitHub repository&lt;/h4&gt;
&lt;p&gt;Similarly to the first approach, we need to fetch webmentions from webmention.io. This time however, we are going to sync all mentions for our domain, instead of mentions per post/site. We could do it per post, but I find Sebastian’s solution quite elegant, so we’ll stick to it.&lt;/p&gt;
&lt;p&gt;The synchronization works like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fetch all mentions for our domain (in my case &lt;a href=&quot;https://janmonschke.com&quot;&gt;https://janmonschke.com&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;For each webmention, we will read out it’s &lt;code class=&quot;language-text&quot;&gt;wm-target&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;Check in &lt;code class=&quot;language-text&quot;&gt;./webmentions/data/&lt;/code&gt; if we already have a JSON webmention file for that post (e.g. &lt;code class=&quot;language-text&quot;&gt;webmentions-explained.json&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;If the file exists, then merge the new mention into that file
&lt;ol&gt;
&lt;li&gt;Make sure to exclude duplicates by comparing the &lt;code class=&quot;language-text&quot;&gt;wm-id&lt;/code&gt; property 🔎&lt;/li&gt;
&lt;li&gt;Sort mentions by &lt;code class=&quot;language-text&quot;&gt;wm-id&lt;/code&gt; to keep a roughly correct order in the cache file. The actual order for mentions will be based on the &lt;code class=&quot;language-text&quot;&gt;published&lt;/code&gt; property later on. However, likes and reposts don’t have this property, so &lt;code class=&quot;language-text&quot;&gt;wm-id&lt;/code&gt; is the best we can do at this point. ✅&lt;/li&gt;
&lt;li&gt;Write the file to disk 🎉&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;If the file does not exist, create a new cache file for this post which only contains this webmention: &lt;code class=&quot;language-text&quot;&gt;[webmention]&lt;/code&gt; 🎉&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can check out the code below or directly in my &lt;a href=&quot;https://github.com/janmonschke/janmonschke.github.com/blob/dev/webmentions/sync.js&quot;&gt;site’s GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;iframe src=&quot;https://gist.github.com/janmonschke/49d354bc96393348a9037dba0018fa6b.pibb&quot; style=&quot;width: 100%; height: 300px; border: 0;margin-top: -1.5em;&quot;&gt;
&lt;/iframe&gt;
&lt;p&gt;I found that a good directory for the JSON files is &lt;code class=&quot;language-text&quot;&gt;./webmentions/data&lt;/code&gt; since my sync script lives in &lt;code class=&quot;language-text&quot;&gt;./webmentions/sync.js&lt;/code&gt;. First I tried to co-locate blog posts and their webmentions cache in the same but it turned out to be quite complicated to find the correct directory based on the &lt;code class=&quot;language-text&quot;&gt;wm-target&lt;/code&gt; property. I could parse those urls and then also parse all my post’s frontmatter to try and match them but there is an easier way to associate mentions and posts and that is GraphQL.&lt;/p&gt;
&lt;p&gt;One optimization for the synchronization flow is to not always fetch all webmentions. If you regularly sync your mentions, you can use the &lt;code class=&quot;language-text&quot;&gt;since&lt;/code&gt; parameter in the webmention.io API in order to limit the timeframe for new mentions.&lt;/p&gt;
&lt;h4&gt;Sourcing webmentions into Gatsby’s GraphQL layer&lt;/h4&gt;
&lt;p&gt;Now that we have the mentions in our repository, we want to tell Gatsby to ingest them so we can query them via GraphQL. For that we need to install &lt;a href=&quot;https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-transformer-json#readme&quot;&gt;gatsby-transformer-json&lt;/a&gt; and &lt;a href=&quot;https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-source-filesystem#readme&quot;&gt;gatsby-source-filesystem&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;code class=&quot;language-text&quot;&gt;gatsby-config.js&lt;/code&gt; we then set up the plugins like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;gatsby-transformer-json&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;typeName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;webmentions&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;gatsby-source-filesystem&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;__dirname&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/webmentions/data&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby-source-filesystem&lt;/code&gt; tells Gatsby to source files from &lt;code class=&quot;language-text&quot;&gt;${__dirname}/webmentions/data&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;gatsby-transformer-json&lt;/code&gt; parses the JSON content from those files and makes the webmentions available via GraphQL.&lt;/p&gt;
&lt;p&gt;In GraphiQL, we now have access to a new entry for &lt;code class=&quot;language-text&quot;&gt;allWebmentions&lt;/code&gt; which contains the content of all the sourced JSON files.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/85e651266c630d7d83048d9bd7b024e0/507e6/graphiql.webp 200w,
https://janmonschke.com/static/85e651266c630d7d83048d9bd7b024e0/28a80/graphiql.webp 400w,
https://janmonschke.com/static/85e651266c630d7d83048d9bd7b024e0/8d2ea/graphiql.webp 800w,
https://janmonschke.com/static/85e651266c630d7d83048d9bd7b024e0/68fc1/graphiql.webp 1200w,
https://janmonschke.com/static/85e651266c630d7d83048d9bd7b024e0/43d96/graphiql.webp 1600w,
https://janmonschke.com/static/85e651266c630d7d83048d9bd7b024e0/d7140/graphiql.webp 2458w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/85e651266c630d7d83048d9bd7b024e0/36ca5/graphiql.png 200w,
https://janmonschke.com/static/85e651266c630d7d83048d9bd7b024e0/a3397/graphiql.png 400w,
https://janmonschke.com/static/85e651266c630d7d83048d9bd7b024e0/a331c/graphiql.png 800w,
https://janmonschke.com/static/85e651266c630d7d83048d9bd7b024e0/8537d/graphiql.png 1200w,
https://janmonschke.com/static/85e651266c630d7d83048d9bd7b024e0/1a152/graphiql.png 1600w,
https://janmonschke.com/static/85e651266c630d7d83048d9bd7b024e0/f866a/graphiql.png 2458w&quot; sizes=&quot;&quot; type=&quot;image/png&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/85e651266c630d7d83048d9bd7b024e0/a331c/graphiql.png&quot; alt=&quot;Screenshot of GraphiQL showing the new entry for allWebmentions&quot; title=&quot;Screenshot of GraphiQL showing the new entry for allWebmentions&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;If we wanted to fetch all webmentions of our site, we could use the following query:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;graphql&quot;&gt;&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;token definition-query function&quot;&gt;Webmentions&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token object&quot;&gt;allWebmentions&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token object&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token object&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;token object&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;name&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;photo&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;url&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token object&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;text&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;url&lt;/span&gt;
        &lt;span class=&quot;token property-query&quot;&gt;published&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token attr-name&quot;&gt;formatString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;YYYY/MM/DD hh:mm&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would return information on each webmention’s user, it’s content, the url it came from and the date it was published at. The JSON transformer even managed to deduct the correct type for the &lt;code class=&quot;language-text&quot;&gt;published&lt;/code&gt; field. Since it detected a &lt;code class=&quot;language-text&quot;&gt;Date&lt;/code&gt; type, we can use the &lt;code class=&quot;language-text&quot;&gt;formatString&lt;/code&gt; transform to get a preformatted date string 📆.&lt;/p&gt;
&lt;h4&gt;Querying and displaying webmentions for your blog post&lt;/h4&gt;
&lt;p&gt;It’s nice to have all webmentions for our site, but a more practical query is to ask for mentions of a specific post on our site. For that, we’ll filter webmentions by their &lt;code class=&quot;language-text&quot;&gt;wm_target&lt;/code&gt; property. &lt;code class=&quot;language-text&quot;&gt;wm_target&lt;/code&gt; is the public url of the post.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;graphql&quot;&gt;&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;token definition-query function&quot;&gt;Webmentions&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property-query&quot;&gt;allWebmentions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;wm_target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$publicUrl&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;published&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ASC&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At the same time, we can also use the &lt;code class=&quot;language-text&quot;&gt;published&lt;/code&gt; property to sort the posts by their publishing date. The &lt;code class=&quot;language-text&quot;&gt;$publicUrl&lt;/code&gt; variable we can pass to Gatsby’s &lt;code class=&quot;language-text&quot;&gt;createPage&lt;/code&gt; function like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; slug &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fields&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;createPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; slug&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; blogPost&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;publicUrl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ensureTrailingSlash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;YOUR_DOMAIN&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; slug&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I noticed that all &lt;code class=&quot;language-text&quot;&gt;wm_target&lt;/code&gt; values have a trainling slash, but only some of the &lt;code class=&quot;language-text&quot;&gt;slug&lt;/code&gt;s did, so I made a little helper function (&lt;code class=&quot;language-text&quot;&gt;ensureTrailingSlash&lt;/code&gt;) that appends a slash in case the slug doesn’t have one.&lt;/p&gt;
&lt;p&gt;Now there is only one more filter missing. If you’ve read the first part about fetching webmentions dynamically, you might remember that we’re now also receiving like- and repost-mentions of our post. Those lack some properties such as &lt;code class=&quot;language-text&quot;&gt;content&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;published&lt;/code&gt; which is why we filtered them out previously. We can achieve the same thing in GraphQL:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;graphql&quot;&gt;&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;token definition-query function&quot;&gt;Webmentions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$publicUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;webmentions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token property-query&quot;&gt;allWebmentions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;wm_property&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;in-reply-to&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;mention-of&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;wm_target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$publicUrl&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;published&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ASC&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will only return replies and mentions of our post and it will allow us to display a list of webmentions. On my blog, I’m rendering the webmentions like this:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/1b8a17dcfcccdc1874a9fb91cc04ae78/507e6/list_of_webmentions.webp 200w,
https://janmonschke.com/static/1b8a17dcfcccdc1874a9fb91cc04ae78/28a80/list_of_webmentions.webp 400w,
https://janmonschke.com/static/1b8a17dcfcccdc1874a9fb91cc04ae78/8d2ea/list_of_webmentions.webp 800w,
https://janmonschke.com/static/1b8a17dcfcccdc1874a9fb91cc04ae78/68fc1/list_of_webmentions.webp 1200w,
https://janmonschke.com/static/1b8a17dcfcccdc1874a9fb91cc04ae78/7f4dd/list_of_webmentions.webp 1426w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/1b8a17dcfcccdc1874a9fb91cc04ae78/36ca5/list_of_webmentions.png 200w,
https://janmonschke.com/static/1b8a17dcfcccdc1874a9fb91cc04ae78/a3397/list_of_webmentions.png 400w,
https://janmonschke.com/static/1b8a17dcfcccdc1874a9fb91cc04ae78/a331c/list_of_webmentions.png 800w,
https://janmonschke.com/static/1b8a17dcfcccdc1874a9fb91cc04ae78/8537d/list_of_webmentions.png 1200w,
https://janmonschke.com/static/1b8a17dcfcccdc1874a9fb91cc04ae78/7608f/list_of_webmentions.png 1426w&quot; sizes=&quot;&quot; type=&quot;image/png&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/1b8a17dcfcccdc1874a9fb91cc04ae78/a331c/list_of_webmentions.png&quot; alt=&quot;A screenshot of the list of webmentions&quot; title=&quot;A screenshot of the list of webmentions&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;As an example, check out how I’m rendering mentions on my site: &lt;a href=&quot;https://github.com/janmonschke/janmonschke.github.com/blob/4413146f9d5b9ebfe73f2b7d4b9aeae0ff2e7349/src/components/Mentions.js&quot;&gt;Mentions.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to show likes and reposts of your posts as well, you can use the following query to also select those:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;graphql&quot;&gt;&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;token definition-query function&quot;&gt;Webmentions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$publicUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;likes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token property-query&quot;&gt;allWebmentions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;wm_property&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;like-of&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;wm_target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$publicUrl&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;reposts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token property-query&quot;&gt;allWebmentions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;wm_property&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;repost-of&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;wm_target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$publicUrl&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then you can display them in your blog post as well.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/bacedeca136b545605b6812deacceeed/507e6/likes.webp 200w,
https://janmonschke.com/static/bacedeca136b545605b6812deacceeed/28a80/likes.webp 400w,
https://janmonschke.com/static/bacedeca136b545605b6812deacceeed/8d2ea/likes.webp 800w,
https://janmonschke.com/static/bacedeca136b545605b6812deacceeed/68fc1/likes.webp 1200w,
https://janmonschke.com/static/bacedeca136b545605b6812deacceeed/5cc32/likes.webp 1300w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/bacedeca136b545605b6812deacceeed/36ca5/likes.png 200w,
https://janmonschke.com/static/bacedeca136b545605b6812deacceeed/a3397/likes.png 400w,
https://janmonschke.com/static/bacedeca136b545605b6812deacceeed/a331c/likes.png 800w,
https://janmonschke.com/static/bacedeca136b545605b6812deacceeed/8537d/likes.png 1200w,
https://janmonschke.com/static/bacedeca136b545605b6812deacceeed/ff5cf/likes.png 1300w&quot; sizes=&quot;&quot; type=&quot;image/png&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/bacedeca136b545605b6812deacceeed/a331c/likes.png&quot; alt=&quot;A screenshot of the likes on my blog post&quot; title=&quot;A screenshot of the likes on my blog post&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;This is the code I use for my likes for example: &lt;a href=&quot;https://github.com/janmonschke/janmonschke.github.com/blob/4413146f9d5b9ebfe73f2b7d4b9aeae0ff2e7349/src/components/Likes.js&quot;&gt;Likes.ts&lt;/a&gt;. I haven’t really felt the need yet to show reposts as well.&lt;/p&gt;
&lt;h4&gt;Sanitizing the external html content&lt;/h4&gt;
&lt;p&gt;Let’s have a last look at the &lt;code class=&quot;language-text&quot;&gt;content&lt;/code&gt; of a webmention. In the previous examples, I only queried for &lt;code class=&quot;language-text&quot;&gt;content.text&lt;/code&gt; which does not actually contain links to profiles but only a raw text representation of a webmention. That means @mentions in the content are neither highlighted, nor are they interactive.&lt;/p&gt;
&lt;p&gt;There is a &lt;code class=&quot;language-text&quot;&gt;content.html&lt;/code&gt; version that does contain links to profiles and proper &lt;code class=&quot;language-text&quot;&gt;&amp;lt;a/&amp;gt;&lt;/code&gt; tags for external links. However, it also contains more unwanted HTML like &lt;code class=&quot;language-text&quot;&gt;&amp;lt;p/&amp;gt;&lt;/code&gt; tags around the text. More importantly, the HTML could potentially contain harmful elements (think: script injection).&lt;/p&gt;
&lt;p&gt;Just showing the raw text was not an option for me, neither was embedding the external HTML. So I decided to parse &lt;code class=&quot;language-text&quot;&gt;content.html&lt;/code&gt; for links to profiles and other resources. And then use that information to enrich the raw text from &lt;code class=&quot;language-text&quot;&gt;content.text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, we’re parsing the HTML for @mentions and their links:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; atMentionUrlRegex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;&amp;lt;a href=&quot;([http].+?)&quot;.+?class=\&quot;u-url\&quot;&amp;gt;(.*?)&amp;lt;\/a&amp;gt;&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Create a lookup for @mention links e.g.:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// { &quot;@janmon&quot;: &quot;https://social.lol/janmon&quot; }&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; atMentionsUrls &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;html&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;matchAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;atMentionUrlRegex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;_atMentions&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; userUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; userAtMention&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    _atMentions&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;userAtMention&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;span&amp;gt;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;/span&amp;gt;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
      userUrl&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; _atMentions&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will allow us to replace raw @mentions e.g. &lt;code class=&quot;language-text&quot;&gt;@janmon&lt;/code&gt; with proper &lt;code class=&quot;language-text&quot;&gt;&amp;lt;a/&amp;gt;&lt;/code&gt; tags in the next step.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; atMentionRegex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;(@\w+)&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; urlRegex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;(https|http):\/\/\S+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; enhancedText &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; text
  &lt;span class=&quot;token comment&quot;&gt;// Replace all @mentions with links nofollow + ugc links that were parsed before&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;atMentionRegex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;atMention&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;a href=&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;atMentionsUrls&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;atMention&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; rel=&quot;nofollow ugc&quot; target=&quot;_blank&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;atMention&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Replace all urls in the text with nofollow + ugc links&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;urlRegex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;a href=&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; rel=&quot;nofollow ugc&quot; target=&quot;_blank&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the first step, we’re using a regular expression that matches @mentions to replace the mention with a normal link. I also decided to add &lt;a href=&quot;http://developer.mozilla.org/docs/Web/HTML/Link_types&quot;&gt;rel=“nofollow ugc”&lt;/a&gt; to the link since they are indeed user-generated and I do not have control over to where they link to.&lt;/p&gt;
&lt;p&gt;In the second step, we’re replacing raw urls (identified by starting with either &lt;code class=&quot;language-text&quot;&gt;http&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;https&lt;/code&gt;) with regular link tags as well. Same procedure, really.&lt;/p&gt;
&lt;p&gt;The resulting text feels “safe” enough for me to then render it in a &lt;code class=&quot;language-text&quot;&gt;dangerouslySetInnerHTML&lt;/code&gt; 😅. This allows me to render webmentions with interactive @mentions and links 🎉 &lt;sup id=&quot;fnref-4&quot;&gt;&lt;a href=&quot;#fn-4&quot; class=&quot;footnote-ref&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The actual code on my site contains some more documentation around the expected shape of the HTML content. Check out my &lt;a href=&quot;https://github.com/janmonschke/janmonschke.github.com/blob/4413146f9d5b9ebfe73f2b7d4b9aeae0ff2e7349/src/components/Mentions.js#L46-L102&quot;&gt;Mentions component&lt;/a&gt; if you want to dive deeper into this function.&lt;/p&gt;
&lt;h3&gt;Automating the webmention synchronisation&lt;/h3&gt;
&lt;p&gt;The final bit of the webmention integration is to automate the entire process. If you’re okay with running the script yourself every now and then that is also totally fine. The automation is totally optional.&lt;/p&gt;
&lt;p&gt;Since I’m using GitHub to host my blog and its code, I’m also using GitHub actions to automate fetching webmentions. Prior knowledge with GitHub actions is not required for this step of the process. I’m giving a basic description of most of the instructions but am not going into a lot of detail.&lt;/p&gt;
&lt;p&gt;The game plan for the automation is to be able to run the synchronization periodically, in response to a webhook from webmention.io and when triggered manually (which is useful for debugging).&lt;/p&gt;
&lt;p&gt;As before, I’m using &lt;a href=&quot;https://sebastiandedeyne.com/webmentions-on-a-static-site-with-github-actions/&quot;&gt;Sebastian’s setup&lt;/a&gt; as the base for my own integration.&lt;/p&gt;
&lt;p&gt;Let’s go ahead and create a new workflow file in &lt;code class=&quot;language-text&quot;&gt;.github/workflows&lt;/code&gt;. Let’s call it &lt;code class=&quot;language-text&quot;&gt;webmention-sync.yml&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Webmentions Sync

&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;cron&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0 */24 * * *&apos;&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  webmentions&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;sync&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This part of the workflow file defines our new workflow &lt;code class=&quot;language-text&quot;&gt;Webmentions Sync&lt;/code&gt; wich will run periodically every 24 hours at midnight (&lt;code class=&quot;language-text&quot;&gt;cron&lt;/code&gt;) and it has a manual trigger in the GitHub UI (&lt;code class=&quot;language-text&quot;&gt;workflow_dispatch&lt;/code&gt;). The actual instructions it will execute are defined in the &lt;code class=&quot;language-text&quot;&gt;jobs&lt;/code&gt; section. Since we only run one job that is made of several steps, we’re only using one top level key here &lt;code class=&quot;language-text&quot;&gt;webmentions-sync&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;webmentions-sync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Check out repository
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v3
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; dev
          &lt;span class=&quot;token key atrule&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.GH_PAGES_ACCESS_TOKEN &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Sync webmentions
        &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;WEBMENTIONS_IO_TOKEN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.WEBMENTIONS_IO_TOKEN &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; node ./webmentions/sync.js
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Commit to repository
        &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;COMMIT_MSG&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
            Sync webmentions&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
          git config user.email &quot;YOUR_GITHUB_EMAIL&quot;
          git config user.name &quot;THE_NAME_YOU_WANT_TO_ASSOCIATE_TO_THE_COMMIT&quot;
          git add .
          git diff --quiet &amp;amp;&amp;amp; git diff --staged --quiet || (git commit -m &quot;${COMMIT_MSG}&quot;; git push origin dev)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the first step we’re using the &lt;code class=&quot;language-text&quot;&gt;actions/checkout&lt;/code&gt; action to check out the current repository on the CI. This is an external action that is provided by GitHub. We’re checking out the &lt;code class=&quot;language-text&quot;&gt;dev&lt;/code&gt; branch and passing a custom &lt;code class=&quot;language-text&quot;&gt;token&lt;/code&gt;. &lt;code class=&quot;language-text&quot;&gt;secrets.GH_PAGES_ACCESS_TOKEN&lt;/code&gt; is a personal access token the script needs in order to commit to your repository with a token that is not the standard action token. Check out &lt;a href=&quot;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token&quot;&gt;this guide on how to create a token on GitHub&lt;/a&gt;. A different token is needed here since only a custom token will trigger the action workflow that will actually build the site&lt;sup id=&quot;fnref-5&quot;&gt;&lt;a href=&quot;#fn-5&quot; class=&quot;footnote-ref&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Next we’re executing the actual synchonisation script with &lt;code class=&quot;language-text&quot;&gt;run: node ./webmentions/sync.js&lt;/code&gt;. Notice that we’re also making the &lt;code class=&quot;language-text&quot;&gt;WEBMENTIONS_IO_TOKEN&lt;/code&gt; secret available as an environment variable. If you remember, the script needs that variable to make requests to webmention.io. The actual value of that variable is saved as an encrypted secret in our repository. Check out &lt;a href=&quot;https://docs.github.com/en/actions/security-guides/encrypted-secrets&quot;&gt;this GitHub guide on how to add encrypted secrets to your repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At that point, the script will have fetched new webmentions and have written them to disk. Time to actually commit them to the repository. There is weirdly no reusabled action for this, so that step is just executing a couple of git commands. Also make sure to replace the committer’s name and e-mail with your credentials so that the commit is associated to your account. The final command will push new mentions to your repository or do nothing if there were no changes.&lt;/p&gt;
&lt;p&gt;Since I am depoying my site to GitHub pages with &lt;a href=&quot;https://github.com/janmonschke/janmonschke.github.com/blob/dev/.github/workflows/gh-pages-deploy.yml&quot;&gt;another action workflow which is triggererd by pushes to &lt;code class=&quot;language-text&quot;&gt;dev&lt;/code&gt;&lt;/a&gt;, my site will automatically rebuild whenever there are new webmentions 🎉.&lt;/p&gt;
&lt;h4&gt;Using webhooks to sync webmentions on-demand&lt;/h4&gt;
&lt;p&gt;This step is also optional but I felt it was actually fun to implement. The webmention.io API has a feature where it calls a webhook when it has new webmentions for your site. This allows us to update webmentions whenever a new mention comes in (faster than just every 24 hours).&lt;/p&gt;
&lt;p&gt;The webhook fits in beautifully into the GitHub action workflow because GitHub workflows can be triggered by calling a webhook. So in theory we could tell the webmention.io API to call our GitHub webhook directly. Which would then in turn start the webmention synchronization workflow.&lt;/p&gt;
&lt;p&gt;There is only a tiny problem with that setup. The GitHub webhook needs to be called with specific headers. Those headers cannot be configured on webmention.io. In order to go around this issue, I decided to add a no-code tool in between those two entities.&lt;/p&gt;
&lt;p&gt;I went with &lt;a href=&quot;https://pipedream.com&quot;&gt;pipedream.com&lt;/a&gt; because I struggled to set up a webhook from &lt;a href=&quot;https://ifttt.com/&quot;&gt;ifttt.com&lt;/a&gt; to GitHub and there is no way to inspect outgoing requests. It’s possible to make this flow work with other no-code tools but since I’m already using pipedream for other automations, I opted for this one.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/8e4203db9a2ecd77bfa62d9f44d396df/507e6/pipedream_trigger.webp 200w,
https://janmonschke.com/static/8e4203db9a2ecd77bfa62d9f44d396df/28a80/pipedream_trigger.webp 400w,
https://janmonschke.com/static/8e4203db9a2ecd77bfa62d9f44d396df/8d2ea/pipedream_trigger.webp 800w,
https://janmonschke.com/static/8e4203db9a2ecd77bfa62d9f44d396df/68fc1/pipedream_trigger.webp 1200w,
https://janmonschke.com/static/8e4203db9a2ecd77bfa62d9f44d396df/43d96/pipedream_trigger.webp 1600w,
https://janmonschke.com/static/8e4203db9a2ecd77bfa62d9f44d396df/82a76/pipedream_trigger.webp 1766w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/8e4203db9a2ecd77bfa62d9f44d396df/36ca5/pipedream_trigger.png 200w,
https://janmonschke.com/static/8e4203db9a2ecd77bfa62d9f44d396df/a3397/pipedream_trigger.png 400w,
https://janmonschke.com/static/8e4203db9a2ecd77bfa62d9f44d396df/a331c/pipedream_trigger.png 800w,
https://janmonschke.com/static/8e4203db9a2ecd77bfa62d9f44d396df/8537d/pipedream_trigger.png 1200w,
https://janmonschke.com/static/8e4203db9a2ecd77bfa62d9f44d396df/1a152/pipedream_trigger.png 1600w,
https://janmonschke.com/static/8e4203db9a2ecd77bfa62d9f44d396df/ad654/pipedream_trigger.png 1766w&quot; sizes=&quot;&quot; type=&quot;image/png&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/8e4203db9a2ecd77bfa62d9f44d396df/a331c/pipedream_trigger.png&quot; alt=&quot;Setting up a pipedream trigger&quot; title=&quot;Setting up a pipedream trigger&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;There is no special setup required for this trigger. We only need the url so we can add it to our webmention.io settings page.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/81ae1d40a76b0d3be35c0d1a629ef8b2/507e6/pipedream_trigger_url.webp 200w,
https://janmonschke.com/static/81ae1d40a76b0d3be35c0d1a629ef8b2/28a80/pipedream_trigger_url.webp 400w,
https://janmonschke.com/static/81ae1d40a76b0d3be35c0d1a629ef8b2/8d2ea/pipedream_trigger_url.webp 800w,
https://janmonschke.com/static/81ae1d40a76b0d3be35c0d1a629ef8b2/68fc1/pipedream_trigger_url.webp 1200w,
https://janmonschke.com/static/81ae1d40a76b0d3be35c0d1a629ef8b2/43d96/pipedream_trigger_url.webp 1600w,
https://janmonschke.com/static/81ae1d40a76b0d3be35c0d1a629ef8b2/4dc4f/pipedream_trigger_url.webp 1748w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/81ae1d40a76b0d3be35c0d1a629ef8b2/36ca5/pipedream_trigger_url.png 200w,
https://janmonschke.com/static/81ae1d40a76b0d3be35c0d1a629ef8b2/a3397/pipedream_trigger_url.png 400w,
https://janmonschke.com/static/81ae1d40a76b0d3be35c0d1a629ef8b2/a331c/pipedream_trigger_url.png 800w,
https://janmonschke.com/static/81ae1d40a76b0d3be35c0d1a629ef8b2/8537d/pipedream_trigger_url.png 1200w,
https://janmonschke.com/static/81ae1d40a76b0d3be35c0d1a629ef8b2/1a152/pipedream_trigger_url.png 1600w,
https://janmonschke.com/static/81ae1d40a76b0d3be35c0d1a629ef8b2/79ae3/pipedream_trigger_url.png 1748w&quot; sizes=&quot;&quot; type=&quot;image/png&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/81ae1d40a76b0d3be35c0d1a629ef8b2/a331c/pipedream_trigger_url.png&quot; alt=&quot;Pipedream provides a url for your webhook trigger&quot; title=&quot;Pipedream provides a url for your webhook trigger&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;The trigger for our new pipedream workflow is an incoming HTTP request:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/b73511fb7013a9bc07696da72fe35e74/507e6/webmention_io_webhooks.webp 200w,
https://janmonschke.com/static/b73511fb7013a9bc07696da72fe35e74/28a80/webmention_io_webhooks.webp 400w,
https://janmonschke.com/static/b73511fb7013a9bc07696da72fe35e74/8d2ea/webmention_io_webhooks.webp 800w,
https://janmonschke.com/static/b73511fb7013a9bc07696da72fe35e74/68fc1/webmention_io_webhooks.webp 1200w,
https://janmonschke.com/static/b73511fb7013a9bc07696da72fe35e74/43d96/webmention_io_webhooks.webp 1600w,
https://janmonschke.com/static/b73511fb7013a9bc07696da72fe35e74/a48fc/webmention_io_webhooks.webp 1634w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/b73511fb7013a9bc07696da72fe35e74/36ca5/webmention_io_webhooks.png 200w,
https://janmonschke.com/static/b73511fb7013a9bc07696da72fe35e74/a3397/webmention_io_webhooks.png 400w,
https://janmonschke.com/static/b73511fb7013a9bc07696da72fe35e74/a331c/webmention_io_webhooks.png 800w,
https://janmonschke.com/static/b73511fb7013a9bc07696da72fe35e74/8537d/webmention_io_webhooks.png 1200w,
https://janmonschke.com/static/b73511fb7013a9bc07696da72fe35e74/1a152/webmention_io_webhooks.png 1600w,
https://janmonschke.com/static/b73511fb7013a9bc07696da72fe35e74/f546c/webmention_io_webhooks.png 1634w&quot; sizes=&quot;&quot; type=&quot;image/png&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/b73511fb7013a9bc07696da72fe35e74/a331c/webmention_io_webhooks.png&quot; alt=&quot;webmention.io settings screenshot showing the form to enter a webhook url&quot; title=&quot;webmention.io settings screenshot showing the form to enter a webhook url&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;On the &lt;a href=&quot;https://webmention.io/settings/webhooks&quot;&gt;webhooks settings page&lt;/a&gt; you can then paste that URL and webmention.io will call it whenever there is a new webmention.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/7851d2daf7c1c320d406249cf3a1d237/507e6/pipedream_step.webp 200w,
https://janmonschke.com/static/7851d2daf7c1c320d406249cf3a1d237/28a80/pipedream_step.webp 400w,
https://janmonschke.com/static/7851d2daf7c1c320d406249cf3a1d237/8d2ea/pipedream_step.webp 800w,
https://janmonschke.com/static/7851d2daf7c1c320d406249cf3a1d237/68fc1/pipedream_step.webp 1200w,
https://janmonschke.com/static/7851d2daf7c1c320d406249cf3a1d237/43d96/pipedream_step.webp 1600w,
https://janmonschke.com/static/7851d2daf7c1c320d406249cf3a1d237/c072b/pipedream_step.webp 1876w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/7851d2daf7c1c320d406249cf3a1d237/36ca5/pipedream_step.png 200w,
https://janmonschke.com/static/7851d2daf7c1c320d406249cf3a1d237/a3397/pipedream_step.png 400w,
https://janmonschke.com/static/7851d2daf7c1c320d406249cf3a1d237/a331c/pipedream_step.png 800w,
https://janmonschke.com/static/7851d2daf7c1c320d406249cf3a1d237/8537d/pipedream_step.png 1200w,
https://janmonschke.com/static/7851d2daf7c1c320d406249cf3a1d237/1a152/pipedream_step.png 1600w,
https://janmonschke.com/static/7851d2daf7c1c320d406249cf3a1d237/6c823/pipedream_step.png 1876w&quot; sizes=&quot;&quot; type=&quot;image/png&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/7851d2daf7c1c320d406249cf3a1d237/a331c/pipedream_step.png&quot; alt=&quot;Selecting an outgoing HTTP request as the next step in pipedream&quot; title=&quot;Selecting an outgoing HTTP request as the next step in pipedream&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Back in our pipedream workflow, we can add a new HTTP request step:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/8a354c4ed6e44e7acc57e12d4d141b30/507e6/pipedream_step_http_post.webp 200w,
https://janmonschke.com/static/8a354c4ed6e44e7acc57e12d4d141b30/28a80/pipedream_step_http_post.webp 400w,
https://janmonschke.com/static/8a354c4ed6e44e7acc57e12d4d141b30/8d2ea/pipedream_step_http_post.webp 800w,
https://janmonschke.com/static/8a354c4ed6e44e7acc57e12d4d141b30/68fc1/pipedream_step_http_post.webp 1200w,
https://janmonschke.com/static/8a354c4ed6e44e7acc57e12d4d141b30/43d96/pipedream_step_http_post.webp 1600w,
https://janmonschke.com/static/8a354c4ed6e44e7acc57e12d4d141b30/c97c6/pipedream_step_http_post.webp 1866w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/8a354c4ed6e44e7acc57e12d4d141b30/36ca5/pipedream_step_http_post.png 200w,
https://janmonschke.com/static/8a354c4ed6e44e7acc57e12d4d141b30/a3397/pipedream_step_http_post.png 400w,
https://janmonschke.com/static/8a354c4ed6e44e7acc57e12d4d141b30/a331c/pipedream_step_http_post.png 800w,
https://janmonschke.com/static/8a354c4ed6e44e7acc57e12d4d141b30/8537d/pipedream_step_http_post.png 1200w,
https://janmonschke.com/static/8a354c4ed6e44e7acc57e12d4d141b30/1a152/pipedream_step_http_post.png 1600w,
https://janmonschke.com/static/8a354c4ed6e44e7acc57e12d4d141b30/d3a93/pipedream_step_http_post.png 1866w&quot; sizes=&quot;&quot; type=&quot;image/png&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/8a354c4ed6e44e7acc57e12d4d141b30/a331c/pipedream_step_http_post.png&quot; alt=&quot;Setting up the URL and body of the outgoing HTTP request&quot; title=&quot;Setting up the URL and body of the outgoing HTTP request&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;The request should go to &lt;code class=&quot;language-text&quot;&gt;api.github.com/YOUR_NAME/REPOSITORY.git/dispatches&lt;/code&gt; (obv. replace with your own repository) and as its body it should send a simple JSON object that describes the type of event (will explain later). In our case, I called the event &lt;code class=&quot;language-text&quot;&gt;webmention_webhook&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/7586cb566a10f898bce34dc746257da4/507e6/pipedream_step_http_post_headers.webp 200w,
https://janmonschke.com/static/7586cb566a10f898bce34dc746257da4/28a80/pipedream_step_http_post_headers.webp 400w,
https://janmonschke.com/static/7586cb566a10f898bce34dc746257da4/8d2ea/pipedream_step_http_post_headers.webp 800w,
https://janmonschke.com/static/7586cb566a10f898bce34dc746257da4/68fc1/pipedream_step_http_post_headers.webp 1200w,
https://janmonschke.com/static/7586cb566a10f898bce34dc746257da4/43d96/pipedream_step_http_post_headers.webp 1600w,
https://janmonschke.com/static/7586cb566a10f898bce34dc746257da4/ab20a/pipedream_step_http_post_headers.webp 1848w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/7586cb566a10f898bce34dc746257da4/36ca5/pipedream_step_http_post_headers.png 200w,
https://janmonschke.com/static/7586cb566a10f898bce34dc746257da4/a3397/pipedream_step_http_post_headers.png 400w,
https://janmonschke.com/static/7586cb566a10f898bce34dc746257da4/a331c/pipedream_step_http_post_headers.png 800w,
https://janmonschke.com/static/7586cb566a10f898bce34dc746257da4/8537d/pipedream_step_http_post_headers.png 1200w,
https://janmonschke.com/static/7586cb566a10f898bce34dc746257da4/1a152/pipedream_step_http_post_headers.png 1600w,
https://janmonschke.com/static/7586cb566a10f898bce34dc746257da4/2de51/pipedream_step_http_post_headers.png 1848w&quot; sizes=&quot;&quot; type=&quot;image/png&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/7586cb566a10f898bce34dc746257da4/a331c/pipedream_step_http_post_headers.png&quot; alt=&quot;Setting up the HTTP headers for your outgoing HTTP request&quot; title=&quot;Setting up the HTTP headers for your outgoing HTTP request&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Next we add the required headers to the request. In &lt;code class=&quot;language-text&quot;&gt;Authorization&lt;/code&gt;, add your GitHub token (you can use the one we created earlier) and in &lt;code class=&quot;language-text&quot;&gt;Accept&lt;/code&gt; add &lt;code class=&quot;language-text&quot;&gt;application/vnd.github+json&lt;/code&gt;. This marks the workflow as complete and you can deploy it.&lt;/p&gt;
&lt;p&gt;The only thing that’s missing now is a change to our GitHub workflow. In our &lt;code class=&quot;language-text&quot;&gt;on&lt;/code&gt; list, we now add another entry &lt;code class=&quot;language-text&quot;&gt;repository_dispatch&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;cron&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0 */24 * * *&apos;&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# pipedream webhook&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;repository_dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; webmention_webhook&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;repository_dispatch&lt;/code&gt; enables webhooks for this workflow and &lt;code class=&quot;language-text&quot;&gt;types: - webmention_webhook&lt;/code&gt; sets up the flow to run on webhooks that have the event type &lt;code class=&quot;language-text&quot;&gt;webmention_webhook&lt;/code&gt; (which comes from the request body in our pipedream request).&lt;/p&gt;
&lt;p&gt;And that’s it. You can test out the whole flow by liking one of your toots / tweets that contain a URL to your own blog. Once brid.gy picks up the like (you can make it rescan that toot-/tweet-url) you should see that your GitHub workflow was triggered and your site is built again 🎉&lt;/p&gt;
&lt;p&gt;That’s really it.&lt;/p&gt;
&lt;p&gt;Unless.&lt;/p&gt;
&lt;p&gt;Well, in the rare case where you will have lots of likes, mentions and reposts for a blog post, you will now trigger a new pipeline run for every one of those webhook calls. This could result in git conflicts on the pipeline. Which in turn will potentially block the pipeline. It’s also not necessary to build your site 10 times within a minute. You can prevent multiple pipeline runs by adding the following to your workflow file:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;concurrency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; webmention_sync
  &lt;span class=&quot;token key atrule&quot;&gt;cancel-in-progress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will stop previous pipelines when a new pipeline run is triggered. No more parallel pipeline runs, no more conflicts, yay 🎉&lt;/p&gt;
&lt;p&gt;This was really it, haha.&lt;/p&gt;
&lt;h2&gt;The end (my friend)&lt;/h2&gt;
&lt;p&gt;I hope this helps you to set up webmentions on your site. This post did get a little longer than I hoped, and documenting the process took way longer than actually building the integration. That is to say, it might look complicated, but it’s not as much work as it seems to be!&lt;/p&gt;
&lt;p&gt;Let me know how it worked out for you on your site by replying to &lt;a href=&quot;https://social.lol/@janmon/109777627702072379&quot;&gt;this toot&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/thedeftone/status/1620004702632169473&quot;&gt;this tweet&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;Check out this discussion on why Mastodon doesn’t currently support webmentions: &lt;a href=&quot;https://github.com/mastodon/mastodon/issues/6074&quot;&gt;https://github.com/mastodon/mastodon/issues/6074&lt;/a&gt;&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&quot;fn-2&quot;&gt;Brid.gy uses the standard Twitter search which does not return replies for tweets that are older than a couple of days: &lt;a href=&quot;https://brid.gy/about#missing&quot;&gt;https://brid.gy/about#missing&lt;/a&gt;&lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&quot;fn-3&quot;&gt;Yes, I know about the debate over fetching in &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt;. That’s not the point of this example. I just wanted to provide a quick piece of code to showcase fetching webmentions on the client. 😅&lt;a href=&quot;#fnref-3&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&quot;fn-4&quot;&gt;This approach of enriching the text might not be 100% secure itself and it relies on the fact that &lt;code class=&quot;language-text&quot;&gt;content.text&lt;/code&gt; does not contain any HTML tags.&lt;a href=&quot;#fnref-4&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&quot;fn-5&quot;&gt;This discussion on GitHub shines some light on why another token is required: &lt;a href=&quot;https://github.com/community/community/discussions/37103&quot;&gt;https://github.com/community/community/discussions/37103&lt;/a&gt;&lt;a href=&quot;#fnref-5&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content:encoded></item><item><title><![CDATA[Changing my online identity]]></title><description><![CDATA[TLDR: You can find me on @janmon@social.lol now. I joined Twitter in January 2009. Like everybody else, I had to find a username. I was…]]></description><link>https://janmonschke.com/changing-my-online-identity</link><guid isPermaLink="false">https://janmonschke.com/changing-my-online-identity</guid><pubDate>Sun, 01 Jan 2023 00:00:00 GMT</pubDate><content:encoded>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;TLDR: You can find me on &lt;a href=&quot;https://social.lol/@janmon&quot;&gt;@janmon@social.lol&lt;/a&gt; now.&lt;/p&gt;
&lt;p&gt;I joined Twitter in January 2009. Like everybody else, I had to find a username. I was young, just started studying and I was (and still am) a huge fan of &lt;a href=&quot;https://en.wikipedia.org/wiki/Deftones&quot;&gt;the Deftones&lt;/a&gt;, so I thought I would be cheeky to use &lt;strong&gt;@thedeftone&lt;/strong&gt; as my handle. It described my affinity to the band and I was betting on some people accidentally subscribing to my account instead of the bands account. The latter didn’t really work out and mostly led to confusion when people tried to follow me. Joke’s on me, I guess ;)&lt;/p&gt;
&lt;p&gt;Another reason for @thedeftone was going for a handle that didn’t contain my name. I thought I would stay somewhat anonymous that way. Your handle was your display name back in those days. Only people how knew you would know who you were.&lt;/p&gt;
&lt;p&gt;It’s fun to go back and check my first tweets &lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I joined the platform when I just moved out of my parent’s house to study computer science. I mainly tweeted about studying and how I was preparing for exams. The first non-uni topic for me was the attending my first &lt;a href=&quot;https://en.wikipedia.org/wiki/BarCamp&quot;&gt;barcamp&lt;/a&gt; (&lt;a href=&quot;https://twitter.com/search?q=%23bcruhr2&amp;amp;src=typed_query&quot;&gt;#bcruhr2&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Apparently at that Barcamp there was a talk about JavaScript on the server. The only thing I noted about that talk was that it was interesting but &lt;a href=&quot;https://twitter.com/thedeftone/status/1407290721&quot;&gt;I found JS still very ugly&lt;/a&gt; . Mind you that I wrote mainly Java back in those days at uni. Those times have definitely changed now that I’m earning my bread and butter writing JavaScript 😅&lt;/p&gt;
&lt;p&gt;For context, that talk was not about NodeJS. It was a talk on a Java-based JavaScript runtime called &lt;a href=&quot;https://github.com/mozilla/rhino&quot;&gt;Rhino&lt;/a&gt; . NodeJS didn’t even exist at that point (March 2009) but it was released a couple months after that talk (May of 2009).&lt;/p&gt;
&lt;p&gt;But back to my beginnings on Twitter.&lt;/p&gt;
&lt;p&gt;Looking back at my old tweets I realized that I actually started out tweeting in German. Three months in, I then randomly switched to tweeting in English. Most of the people I was communicating with were friends from university, so it made sense to start out in German. But all of a sudden I thought it would be better to switch to English.&lt;/p&gt;
&lt;p&gt;Maybe it had to do with me switching to (or trying to switch to) &lt;a href=&quot;https://en.wikipedia.org/wiki/OpenSolaris&quot;&gt;OpenSolaris&lt;/a&gt; &lt;sup id=&quot;fnref-2&quot;&gt;&lt;a href=&quot;#fn-2&quot; class=&quot;footnote-ref&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;  I must have read so many English guides and forum posts to make that OpenSolaris work on my machine, that I thought I should document my journey in English? Maybe there’s an easier explanation for the language change. Most of our uni materials and most programming documentation online are written in English. So tweeting about those things in German felt off. It might’ve been a mix of those reasons.&lt;/p&gt;
&lt;p&gt;But I digress. I guess what I’m trying to say is that I had loads of fun early in my early days on Twitter. A lot of my friends were there and my silly little username was not in the way.&lt;/p&gt;
&lt;p&gt;Over the course of university I started to give talks at barcamps, meetups and eventually &lt;a href=&quot;https://janmonschke.com/#talks&quot;&gt;at conferences&lt;/a&gt;. My Twitter handle can be found on my slide decks. After my talks though, I would often have people come to me to tell me they couldn’t find me on Twitter, they just found the account of a metal band. 😭&lt;/p&gt;
&lt;p&gt;I should’ve probay changed my handle the first time this happened. But I didn’t give those interactions much thought. I never questioned my choice of handle back then. But this is exactly what I did over the last months.&lt;/p&gt;
&lt;p&gt;Since Elon Musk took over Twitter, I, like &lt;a href=&quot;https://andy-bell.co.uk/free-of-the-bird/&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;https://www.tbray.org/ongoing/When/202x/2022/11/26/Bye-Twitter&quot;&gt;others&lt;/a&gt;, started to distance myself from his platform. His decisions to partner up with white supremacists, to block journalists and the way he’s treating his staff made it clear to me that I did not want to be part of it anymore.&lt;/p&gt;
&lt;p&gt;So I joined Mastodon. More specifically, I joined the &lt;a href=&quot;https://indieweb.social&quot;&gt;indieweb.social&lt;/a&gt; instance. Home to many interesting web personalities. I thought I had found my crowd. I used the same handle that I used on Twitter to make it easier for folks to find and to recognize me.&lt;/p&gt;
&lt;p&gt;And its fun over there on Mastodon. It does feel like the old days on Twitter. People are nice to one another, they support each other and best of it all, I haven’t seen any crypto coin spam in my timeline.&lt;/p&gt;
&lt;p&gt;Still, something was missing and I finally figured out what it was. Let me explain.&lt;/p&gt;
&lt;p&gt;It’s been a couple of years now that I’ve been struggling with finding the right things to tweet about. I enjoyed reading and replying to friend’s statuses but didn’t feel like tweeting much myself. I think it has to do with me trying to please the followers I gained by speaking at conferences. People that, at least in my mind, would expect me to tweet exclusively about programming things. Nobody would be interested in silly or mundane updates, worse, they would unfollow. Oh the damage a silly tweet could do to my follower ratio.&lt;/p&gt;
&lt;p&gt;I’ve stopped enjoying to tweet over my fears of not pleasing my audience. I lost the easiness of tweeting what’s on my mind. And I had only myself to blame.&lt;/p&gt;
&lt;p&gt;That is why I decided to start the new year with a new username and on a new instance. A fresh start if you will. 🎊&lt;/p&gt;
&lt;p&gt;On the surface, it might look like only a name change but it means more to me. I’m associating my old handle too much with my professional life and I wasn’t able to let go of that. That’s why the handle had to go.&lt;/p&gt;
&lt;p&gt;Regarding the change of instance, I feel like I joined indieweb.social in order to keep up the “professional ” appearance of my online identity. It’s a great instance, don’t get me wrong. I just feel like I want to join an instance that hosts a bunch of web folks but also doesn’t take itself too seriously. In the hope that I will not take myself too seriously anymore as well.&lt;/p&gt;
&lt;p&gt;That is why you can now find me as &lt;a href=&quot;https://social.lol/@janmon&quot;&gt;@janmon@social.lol&lt;/a&gt;. This instance is hosted by the folks over at &lt;a href=&quot;https://omg.lol&quot;&gt;omg.lol&lt;/a&gt;. By the name alone you know that people there are in for some fun. And there’s are plenty of web peeps on that instance, too. And omg.lol looks like a rather cute and unique part of the internet. Their &lt;a href=&quot;https://home.omg.lol/roadmap&quot;&gt;2023 roadmap&lt;/a&gt; looks amazing.&lt;/p&gt;
&lt;p&gt;I chose &lt;strong&gt;@janmon&lt;/strong&gt; as my handle because I’m not trying to hide my identity anymore. And to be hones, I didn’t even try to hide it over on Twitter either. My profile contains links to my personal site and links to talks with my full name on it anyways. My full name is rather hard to spell and a tad too long, so I shortened the lastname to only its first three letters. Ideally I would’ve gone with &lt;strong&gt;@jan&lt;/strong&gt; but that one’s already been taken (like on pretty much every other platform 😄).&lt;/p&gt;
&lt;p&gt;I’m glad that Mastodon makes it so easy to &lt;a href=&quot;https://docs.joinmastodon.org/user/moving/&quot;&gt;redirect your account without losing your followers/followings&lt;/a&gt;. It’s a bummer that I’ll “lose” my posts, but thery weren’t that many yet anyways.&lt;/p&gt;
&lt;p&gt;As for my Twitter account. I’m not sure yet what to do with it. I haven’t tweeted there in forever and only checked it seldomly. Maybe I’ll update my Mastodon handle there and tweet about the occasional blog post but I’m planning to keep it a write-only account.&lt;/p&gt;
&lt;p&gt;So yeah, happy new year! Here’s to a fresh new start of my online identity 🎉 And see you over on &lt;a href=&quot;https://social.lol/@janmon&quot;&gt;Mastodon&lt;/a&gt; 👋&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;You can search for your tweets by time frame using these tags in the Twitter search: &lt;code class=&quot;language-text&quot;&gt;from:ACCOUNT since:2008-03-01 until:2008-03-31&lt;/code&gt;&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&quot;fn-2&quot;&gt;Back in those days I was a real &lt;a href=&quot;https://en.wikipedia.org/wiki/Sun_Microsystems&quot;&gt;Sun&lt;/a&gt; fanboy. I spent most of my days programming in &lt;a href=&quot;https://en.wikipedia.org/wiki/NetBeans&quot;&gt;NetBeans&lt;/a&gt;  programming Java and &lt;a href=&quot;https://en.wikipedia.org/wiki/JavaFX&quot;&gt;JavaFx&lt;/a&gt;. For the longest time in uni it was my dream to join Sun after graduation. Things took a different turn though. But I fell in love with the web and Sun got acquired by Oracle. It wasn’t meant to be in the end.&lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content:encoded></item><item><title><![CDATA[Building a gpx editor with xstate and lit-html]]></title><description><![CDATA[(try out the editor) When I go hiking, I usually record the trip with this battery-efficient GPS Logger app 🏕. Battery-efficiency is…]]></description><link>https://janmonschke.com/building-a-gpx-editor-with-xstate-and-lit-html</link><guid isPermaLink="false">https://janmonschke.com/building-a-gpx-editor-with-xstate-and-lit-html</guid><pubDate>Mon, 08 Nov 2021 00:00:00 GMT</pubDate><content:encoded>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;a href=&quot;https://janmonschke.com/gpx-editor&quot; target=&quot;_blank&quot;&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/3dc3f5fd6f84d5fb737b53ff333e2acb/507e6/gpx-editor-screenshot.webp 200w,
https://janmonschke.com/static/3dc3f5fd6f84d5fb737b53ff333e2acb/28a80/gpx-editor-screenshot.webp 400w,
https://janmonschke.com/static/3dc3f5fd6f84d5fb737b53ff333e2acb/8d2ea/gpx-editor-screenshot.webp 800w,
https://janmonschke.com/static/3dc3f5fd6f84d5fb737b53ff333e2acb/68fc1/gpx-editor-screenshot.webp 1200w,
https://janmonschke.com/static/3dc3f5fd6f84d5fb737b53ff333e2acb/43d96/gpx-editor-screenshot.webp 1600w,
https://janmonschke.com/static/3dc3f5fd6f84d5fb737b53ff333e2acb/d14e2/gpx-editor-screenshot.webp 1922w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/3dc3f5fd6f84d5fb737b53ff333e2acb/36ca5/gpx-editor-screenshot.png 200w,
https://janmonschke.com/static/3dc3f5fd6f84d5fb737b53ff333e2acb/a3397/gpx-editor-screenshot.png 400w,
https://janmonschke.com/static/3dc3f5fd6f84d5fb737b53ff333e2acb/a331c/gpx-editor-screenshot.png 800w,
https://janmonschke.com/static/3dc3f5fd6f84d5fb737b53ff333e2acb/8537d/gpx-editor-screenshot.png 1200w,
https://janmonschke.com/static/3dc3f5fd6f84d5fb737b53ff333e2acb/1a152/gpx-editor-screenshot.png 1600w,
https://janmonschke.com/static/3dc3f5fd6f84d5fb737b53ff333e2acb/9e27f/gpx-editor-screenshot.png 1922w&quot; sizes=&quot;&quot; type=&quot;image/png&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/3dc3f5fd6f84d5fb737b53ff333e2acb/a331c/gpx-editor-screenshot.png&quot; alt=&quot;GPX editor screenshot&quot; title=&quot;GPX editor screenshot&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;
&lt;small&gt;(try out the editor)&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When &lt;a href=&quot;https://aweekinthewoods.com/france/auvergne/&quot;&gt;I go hiking&lt;/a&gt;, I usually record the trip with this battery-efficient &lt;a href=&quot;https://gpslogger.app/&quot;&gt;GPS Logger app&lt;/a&gt; 🏕. Battery-efficiency is important because there’s often no possibility to charge my phone on a multi-day hike. The app let’s me define custom intervals at which it records a GPS point. I usually set the interval to somewhere between 45 seconds and a minute. This resolution is accurate enough for recordings of walks and it does not add too much strain on my battery.&lt;/p&gt;
&lt;p&gt;The app is requesting a GPS fix at certain points in an interval and disables GPS in-between recordings. This sometimes results in inaccurate readings of elevation and GPS locations. At least in my case and on my current phone.This in turn means that when I upload the recording to a tour website like &lt;a href=&quot;https://www.komoot.com/user/214500264344&quot;&gt;komoot&lt;/a&gt; the stats can be quite off and people that use my GPS recording might take wrong turns due to the inaccurate GPS 🛰.&lt;/p&gt;
&lt;p&gt;For that reason I built a GPX editor which allows me to adjust the recorded points and strip out the elevation values. The cool thing about komoot is that they add the elevation info to your route if you don’t provide any. They are using topology data that is a more accurate than my phone’s recording.&lt;/p&gt;
&lt;p&gt;My usual approach to building a small app like that would be to spin up &lt;a href=&quot;https://create-react-app.dev/&quot;&gt;create-react-app&lt;/a&gt; and code away. In the case of this small editor it did feel like overkill. I was also interested in trying out a new kind of app setup. Due to my previous experience with &lt;a href=&quot;https://xstate.js.org/docs/&quot;&gt;XState&lt;/a&gt; I wanted to use it to drive the business logic of the editor. For the rendering I wanted to use &lt;a href=&quot;https://lit-html.polymer-project.org/guide&quot;&gt;list-html&lt;/a&gt; which is tiny and super easy-to-use templating library.&lt;/p&gt;
&lt;p&gt;The last new building-block of my setup was &lt;a href=&quot;https://parceljs.org/&quot;&gt;parcel&lt;/a&gt;. Previously I had pretty much exclusively used &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; and I was in the mood for trying out something new. I was especially curious to see if parcel really required zero configuration (spoiler: It really did not need any configuration 🎉).&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/f8f387242c746785ec546e4b960005c6/507e6/gpx-editor-diagram.webp 200w,
https://janmonschke.com/static/f8f387242c746785ec546e4b960005c6/28a80/gpx-editor-diagram.webp 400w,
https://janmonschke.com/static/f8f387242c746785ec546e4b960005c6/8d2ea/gpx-editor-diagram.webp 800w,
https://janmonschke.com/static/f8f387242c746785ec546e4b960005c6/68fc1/gpx-editor-diagram.webp 1200w,
https://janmonschke.com/static/f8f387242c746785ec546e4b960005c6/43d96/gpx-editor-diagram.webp 1600w,
https://janmonschke.com/static/f8f387242c746785ec546e4b960005c6/69b14/gpx-editor-diagram.webp 1824w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/f8f387242c746785ec546e4b960005c6/36ca5/gpx-editor-diagram.png 200w,
https://janmonschke.com/static/f8f387242c746785ec546e4b960005c6/a3397/gpx-editor-diagram.png 400w,
https://janmonschke.com/static/f8f387242c746785ec546e4b960005c6/a331c/gpx-editor-diagram.png 800w,
https://janmonschke.com/static/f8f387242c746785ec546e4b960005c6/8537d/gpx-editor-diagram.png 1200w,
https://janmonschke.com/static/f8f387242c746785ec546e4b960005c6/1a152/gpx-editor-diagram.png 1600w,
https://janmonschke.com/static/f8f387242c746785ec546e4b960005c6/f5553/gpx-editor-diagram.png 1824w&quot; sizes=&quot;&quot; type=&quot;image/png&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/f8f387242c746785ec546e4b960005c6/a331c/gpx-editor-diagram.png&quot; alt=&quot;GPX editor diagram&quot; title=&quot;GPX editor diagram&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;The diagram above shows the application architecture. At the core of it is the state machine. It holds all of the application’s state, it transitions based on user interaction and performs side-effects when necessary. Side-effects may also cause transitions e.g. in case of a file parsing error.&lt;/p&gt;
&lt;p&gt;The user interface reacts to the state machine’s transitions. Depending on the current state, it will render the appropriate component. It also acts as the glue-code between user interaction and the machine:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;editor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onTransition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;choose-gpx&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;onFileSelected&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; machine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;FILE_SELECTED&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; file &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ChooseFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; onFileSelected &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; contentElement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;export-gpx&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Export&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; contentElement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a given state of the machine, in this case &lt;code class=&quot;language-text&quot;&gt;choose-gpx&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;export-gpx&lt;/code&gt;, the application renders a different component. The application also defines callbacks for the components. These callbacks are executed on user interaction and they result in state transitions (and their side-effects e.g. file parsing).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;onFileSelected&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; File&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ChooseFile&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;
html&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  &amp;lt;form&amp;gt;
    &amp;lt;label&amp;gt;
      &amp;lt;input
        type=&quot;file&quot;
        @change=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;
          props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onFileSelected&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentTarget &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; HTMLInputElement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;files&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      /&amp;gt;
      Select a .gpx file
    &amp;lt;/label&amp;gt;
  &amp;lt;/form&amp;gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check out the  &lt;code class=&quot;language-text&quot;&gt;ChooseFile&lt;/code&gt; component as an example. It renders a file input and calls the &lt;code class=&quot;language-text&quot;&gt;onFileSelected&lt;/code&gt; callback when a file gets selected. This is the same callback as we saw before in the application file. When the callback is invoked, the event is causing a transition of the state machine. Which in turn will then result in the render of a different component. Bonus: I like how this component almost looks like a React component ⚛.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/a0ac2b00f1dd7ffc2debc648fe433e5f/507e6/gpx-editor-state-machine.webp 200w,
https://janmonschke.com/static/a0ac2b00f1dd7ffc2debc648fe433e5f/28a80/gpx-editor-state-machine.webp 400w,
https://janmonschke.com/static/a0ac2b00f1dd7ffc2debc648fe433e5f/8d2ea/gpx-editor-state-machine.webp 800w,
https://janmonschke.com/static/a0ac2b00f1dd7ffc2debc648fe433e5f/68fc1/gpx-editor-state-machine.webp 1200w,
https://janmonschke.com/static/a0ac2b00f1dd7ffc2debc648fe433e5f/43d96/gpx-editor-state-machine.webp 1600w,
https://janmonschke.com/static/a0ac2b00f1dd7ffc2debc648fe433e5f/7489e/gpx-editor-state-machine.webp 2190w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/a0ac2b00f1dd7ffc2debc648fe433e5f/36ca5/gpx-editor-state-machine.png 200w,
https://janmonschke.com/static/a0ac2b00f1dd7ffc2debc648fe433e5f/a3397/gpx-editor-state-machine.png 400w,
https://janmonschke.com/static/a0ac2b00f1dd7ffc2debc648fe433e5f/a331c/gpx-editor-state-machine.png 800w,
https://janmonschke.com/static/a0ac2b00f1dd7ffc2debc648fe433e5f/8537d/gpx-editor-state-machine.png 1200w,
https://janmonschke.com/static/a0ac2b00f1dd7ffc2debc648fe433e5f/1a152/gpx-editor-state-machine.png 1600w,
https://janmonschke.com/static/a0ac2b00f1dd7ffc2debc648fe433e5f/e5e5c/gpx-editor-state-machine.png 2190w&quot; sizes=&quot;&quot; type=&quot;image/png&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/a0ac2b00f1dd7ffc2debc648fe433e5f/a331c/gpx-editor-state-machine.png&quot; alt=&quot;GPX editor state machine&quot; title=&quot;GPX editor state machine&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;This diagram shows all of the state machine’s states, its transitions and side-effects. The XState visualizer at &lt;a href=&quot;https://stately.ai/viz&quot;&gt;stately.ai/viz&lt;/a&gt; is just grat. You paste the machine’s code and it will render an interactive diagram of your machine. It let’s you play around with the transitions, send custom events and save it to your account in case you want to show it to someone else. Pretty much every time I’m writing a state machine, I start inside this visualizer. It makes prototyping a workflow super easy.&lt;/p&gt;
&lt;p&gt;And that is pretty much everything there is to say about the editor. It uses &lt;a href=&quot;https://leafletjs.com/&quot;&gt;Leaflet&lt;/a&gt; as the map renderer and &lt;a href=&quot;https://picturepan2.github.io/spectre/&quot;&gt;spectre.css&lt;/a&gt; as a light-weight CSS component framework.&lt;/p&gt;
&lt;p&gt;Overall I’m very happy with the current setup. I feel productive, the state machine adds a great structure and lit-html is a great renderer for small applications like this one. I will definitely reuse this stack in other applications.&lt;/p&gt;
&lt;p&gt;If you are insterested in trying out the editor yourself, you can find it on &lt;a href=&quot;https://janmonschke.com/gpx-editor&quot;&gt;https://janmonschke.com/gpx-editor&lt;/a&gt;. The code is up on GitHub at &lt;a href=&quot;https://github.com/janmonschke/gpx-editor&quot;&gt;janmonschke/gpx-editor&lt;/a&gt;.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content:encoded></item><item><title><![CDATA[Flexible color definitions in design systems]]></title><description><![CDATA[While working on the implementation of a new design system at work, I came across this nifty little trick that makes color definitions more…]]></description><link>https://janmonschke.com/flexible-color-definitions-in-design-systems</link><guid isPermaLink="false">https://janmonschke.com/flexible-color-definitions-in-design-systems</guid><pubDate>Wed, 19 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;While working on the implementation of a new design system at work, I came across this nifty little trick that makes color definitions more usable and flexible.&lt;/p&gt;
&lt;p&gt;Let’s say our task is to build a &lt;code class=&quot;language-text&quot;&gt;LinkButton&lt;/code&gt; component. A component that looks like a button but it is actually a link. The component’s background should be &lt;code class=&quot;language-text&quot;&gt;space green&lt;/code&gt; from our list of theme colors:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;--colors-space-green&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 227&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 211&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;--surface-primary-button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--colors-space-green&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.ButtonLink&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--surface-primary-button&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This results in the following component component:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;ButtonLink&quot; onclick=&quot;return false;&quot;&gt;ButtonLink&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The design spec specifies, that the background should have &lt;code class=&quot;language-text&quot;&gt;50%&lt;/code&gt; opacity when the element is hovered. So we’re adding an additional opacity rule:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.ButtonLink:hover&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.5&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When hovered, the component’s background changes correctly. However, the text becomes a lot less readable because &lt;code class=&quot;language-text&quot;&gt;opacity&lt;/code&gt; is applied to the entire element which includes its child elements:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;ButtonLink1&quot; onclick=&quot;return false;&quot;&gt;ButtonLink&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not only is this bad for the readbility, it’s also not correct according to the design spec which only specifies a change in opacity for the background. The text should keep its original color.&lt;/p&gt;
&lt;p&gt;Instinctively I want to solve this issue by defining a new variable &lt;code class=&quot;language-text&quot;&gt;colors-space-green-opacity-50&lt;/code&gt; that is a &lt;code class=&quot;language-text&quot;&gt;rgba()&lt;/code&gt; copy of the original color. That color is then used as the background color for the hovered button. That is a valid approach and gets you to the solution quickly.&lt;/p&gt;
&lt;p&gt;Another approach is to define the “raw” RGB values of &lt;code class=&quot;language-text&quot;&gt;space green&lt;/code&gt; as their own variable and use that variable for the base color definition and the hover color. Let me show you what I mean by “raw” RGB values:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;--colors-space-green-rgb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 227&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 211&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;--colors-space-green&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--colors-space-green-rgb&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The definition of &lt;code class=&quot;language-text&quot;&gt;--colors-space-green-rgb&lt;/code&gt; might look incomplete and invalid but it is actually a valid definition of a custom property. Custom properties are replaced &lt;strong&gt;as is&lt;/strong&gt;. &lt;code class=&quot;language-text&quot;&gt;rgb(var(--colors-space-green-rgb))&lt;/code&gt; is interpreted as &lt;code class=&quot;language-text&quot;&gt;rgb(3, 227, 211)&lt;/code&gt; which in turn is identical to our initial color definition of &lt;code class=&quot;language-text&quot;&gt;space green&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This now allows us to define a hover version of the background color that depends on the base color definition:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;--surface-primary-button-50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--colors-space-green-rgb&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0.5&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.ButtonLink:hover&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--surface-primary-button-50&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et voilà, our &lt;code class=&quot;language-text&quot;&gt;ButtonLink&lt;/code&gt; now behaves correctly and it will automatically update when we change the base color definition 🎉:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;ButtonLink2&quot; onclick=&quot;return false;&quot;&gt;ButtonLink&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I like this approach as it gives a lot of flexibility and aids with maintainability.&lt;/p&gt;
&lt;style&gt;
  /* Initial approach */
  :root {
    --colors-space-green: rgb(3, 227, 211);

    --surface-primary-button: var(--colors-space-green);
  }

  .ButtonLink, .ButtonLink1 {
    background: var(--surface-primary-button);
  }
  .ButtonLink1:hover {
    opacity: 0.5;
  }

  /* RGB variable approach */
  :root {
    --colors-space-green-rgb: 3, 227, 211;
    --colors-space-green-2: var(--colors-space-green-rgb);

    --surface-primary-button-2: rgb(var(--colors-space-green-2)); /* Excuse my bad naming here */
    --surface-primary-button-50: rgba(var(--colors-space-green-rgb), 0.5);
  }

  .ButtonLink2 {
    background: var(--surface-primary-button-2);
  }

  .ButtonLink2:hover {
    background: var(--surface-primary-button-50);
  }

  .ButtonLink, .ButtonLink1, .ButtonLink2 {
    color: black;
    margin: 0.5em;
    text-decoration: none;
    padding: 1em;
    border-radius: 15px;
  }
&lt;/style&gt;&lt;/body&gt;&lt;/html&gt;</content:encoded></item><item><title><![CDATA[Setting up TailwindCSS in create-react-app]]></title><description><![CDATA[I have started to use TailwindCSS in a couple of side projects now to try out utility-based styling. All of these projects are regular…]]></description><link>https://janmonschke.com/setting-up-tailwindcss-in-create-react-app</link><guid isPermaLink="false">https://janmonschke.com/setting-up-tailwindcss-in-create-react-app</guid><pubDate>Fri, 17 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;I have started to use &lt;a href=&quot;https://tailwindcss.com/&quot;&gt;TailwindCSS&lt;/a&gt; in a couple of side projects now to try out utility-based styling. All of these projects are regular &lt;a href=&quot;https://create-react-app.dev/&quot;&gt;create-react-app&lt;/a&gt; projects (based on the TypeScript starter). The way create-react-app projects are set up does not allow you to change the project’s webpack config without &lt;a href=&quot;https://create-react-app.dev/docs/available-scripts#npm-run-eject&quot;&gt;‘ejecting’&lt;/a&gt; your app. In this post I want to show how I have added TailwindCSS to my projects without ejecting.&lt;/p&gt;
&lt;p&gt;Ejecting from a create-react-app means you will lose the ability to easily update to newer versions of &lt;code class=&quot;language-text&quot;&gt;react-scripts&lt;/code&gt; but you will gain the ability to change config files like the webpack config. For side projects I try to not eject for as long as I can because I know I would spend a lot of time tweaking configs for no real reason. I like that with create-react-app I can focus on what I am building and I don’t have to worry about config file.&lt;/p&gt;
&lt;p&gt;Now, adding TailwindCSS to a create-react-app project is not as straight forward as adding it to an existing webpack config, but it’s also not super complicated. I have seen several ways to do it and I am using a combination of two approaches that I have seen in other blog posts (linked to at the &lt;a href=&quot;#sources&quot;&gt;bottom of this article&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;First, you have to install TailwindCSS and PostCSS. PostCSS will be used to generate the actual TailwindCSS classes.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install --save-dev tailwindcss postcss-cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that, initialize TailwindCSS (it will generate an empty config for you)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npx tailwind init tailwind.config.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once that is done, create a &lt;code class=&quot;language-text&quot;&gt;postcss.config.js&lt;/code&gt; file in the root of your project. In that config we are setting up the TailwindCSS plugin for PostCSS:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tailwindcss &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;tailwindcss&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;tailwindcss&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./tailwind.config.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we will create our TailwindCSS entry file (&lt;code class=&quot;language-text&quot;&gt;src/tailwind.css&lt;/code&gt;). In that file we can define which parts of TailwindCSS we want to use and how we want them to be configured. For now, we will use the basic setup which will include all of Tailwind’s utility classes:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@tailwind&lt;/span&gt; base&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@tailwind&lt;/span&gt; components&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@tailwind&lt;/span&gt; utilities&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the last step of our setup we will create custom npm scripts that will build TailwindCSS when we run &lt;code class=&quot;language-text&quot;&gt;npm start&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;npm run build&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  (...)
  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    (...)
    &lt;span class=&quot;token property&quot;&gt;&quot;build:tailwind&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;postcss src/tailwind.css -o src/base.css&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;prebuild&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;npm run build:tailwind&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;prestart&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;npm run build:tailwind&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;build:tailwind&lt;/code&gt; will compile the directives from &lt;code class=&quot;language-text&quot;&gt;src/tailwind.css&lt;/code&gt; and output it into &lt;code class=&quot;language-text&quot;&gt;src/base.css&lt;/code&gt;. That file will then contain all of Tailwind’s classes. We need to import it in our top level project files as you can see in &lt;a href=&quot;#example&quot;&gt;the example below&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The custom &lt;code class=&quot;language-text&quot;&gt;build:tailwind&lt;/code&gt; script is run by the &lt;code class=&quot;language-text&quot;&gt;prebuild&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;prestart&lt;/code&gt; scripts which are executed by default before the app starts or is getting build (thanks, &lt;code class=&quot;language-text&quot;&gt;react-scripts&lt;/code&gt;🤩).&lt;/p&gt;
&lt;p&gt;Since &lt;code class=&quot;language-text&quot;&gt;base.css&lt;/code&gt; is a generated file that will be overridden every time you start or build your app, it does not make sense to put any custom CSS in there. You can keep putting your extra CSS in e.g. your component’s CSS files. It also makes sense to add &lt;code class=&quot;language-text&quot;&gt;base.css&lt;/code&gt; to your &lt;code class=&quot;language-text&quot;&gt;.gitignore&lt;/code&gt; so it does not end up in your source control.&lt;/p&gt;
&lt;p&gt;In addition to that, I can also advise you to set up &lt;code class=&quot;language-text&quot;&gt;purgecss&lt;/code&gt; for your project because the generated &lt;code class=&quot;language-text&quot;&gt;base.css&lt;/code&gt; is around 800 KB and you really don’t want to ship all of that CSS to your users. &lt;code class=&quot;language-text&quot;&gt;purgecss&lt;/code&gt; analyzes which CSS classes you’re using in your project and removes all unused class definitions from the generated CSS. This &lt;a href=&quot;https://tailwindcss.com/docs/controlling-file-size/#setting-up-purgecss&quot;&gt;great tutorial on the TailwindCSS website explains how to set it up in just a couple lines of code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope you found my little tutorial helpful and I wish you lots of fun building your React apps with TailwindCSS 😊.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a name=&quot;example&quot;&gt;&lt;/a&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/714aab83697dd98c3881174e9373bb69/507e6/example-component.webp 200w,
https://janmonschke.com/static/714aab83697dd98c3881174e9373bb69/28a80/example-component.webp 400w,
https://janmonschke.com/static/714aab83697dd98c3881174e9373bb69/8d2ea/example-component.webp 800w,
https://janmonschke.com/static/714aab83697dd98c3881174e9373bb69/f2f3a/example-component.webp 822w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/714aab83697dd98c3881174e9373bb69/37402/example-component.jpg 200w,
https://janmonschke.com/static/714aab83697dd98c3881174e9373bb69/4cda9/example-component.jpg 400w,
https://janmonschke.com/static/714aab83697dd98c3881174e9373bb69/c60e9/example-component.jpg 800w,
https://janmonschke.com/static/714aab83697dd98c3881174e9373bb69/04606/example-component.jpg 822w&quot; sizes=&quot;&quot; type=&quot;image/jpeg&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/714aab83697dd98c3881174e9373bb69/c60e9/example-component.jpg&quot; alt=&quot;Example component&quot; title=&quot;Example component&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-dom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./base.css&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;max-w-sm rounded overflow-hidden shadow-lg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;w-full&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;//placekitten.com/400/210&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Sunset in the mountains&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;px-6 py-4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;font-bold text-xl mb-2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;The Coldest Sunset&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text-gray-700 text-base&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus
        quia, nulla! Maiores et perferendis eaque, exercitationem praesentium
        nihil.
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;px-6 py-4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        #photography
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        #travel
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        #winter
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;root&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;a name=&quot;sources&quot;&gt;&lt;/a&gt;Sources:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mikefrancis.dev/blog/create-react-app-tailwind-css&quot;&gt;https://mikefrancis.dev/blog/create-react-app-tailwind-css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@grobeldev/setup-tailwind-with-postcss-in-create-react-app-in-5-minutes-43ae343e2789&quot;&gt;https://medium.com/@grobeldev/setup-tailwind-with-postcss-in-create-react-app-in-5-minutes-43ae343e2789&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</content:encoded></item><item><title><![CDATA[Simple frontend data migration]]></title><description><![CDATA[If you work on a JavaScript application that stores data locally, think of  on the web or  in React Native, you might have found yourself in…]]></description><link>https://janmonschke.com/simple-frontend-data-migration</link><guid isPermaLink="false">https://janmonschke.com/simple-frontend-data-migration</guid><pubDate>Thu, 12 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;If you work on a JavaScript application that stores data locally, think of &lt;code class=&quot;language-text&quot;&gt;localStorage&lt;/code&gt; on the web or &lt;code class=&quot;language-text&quot;&gt;AsyncStorage&lt;/code&gt; in React Native, you might have found yourself in the situation where you want to change the shape of the stored data.&lt;/p&gt;
&lt;p&gt;This on its own does not seem like an impossible task but it can get quite complex over time. You have to make sure to build a system that correctly identifies the version of the local data and that correctly migrates all the different versions to the latest versions. Users might come back to your site/app after 6 months, and might have missed several migrations in the meantime.&lt;/p&gt;
&lt;p&gt;Let’s look at an example to show you what I mean.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// This is the initial shape of your data&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; v0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Test&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;User&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// At some point you change it to this shape&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; v1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Test&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;User&apos;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Your migration function might look sth like this&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;migrate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;oldData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;oldData &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;oldData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastName
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; newData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far so good, you have successfully migrated your client data from &lt;code class=&quot;language-text&quot;&gt;v0&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;v1&lt;/code&gt;. Now let’s add a &lt;code class=&quot;language-text&quot;&gt;v2&lt;/code&gt; to make things interesting.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// We rename `name` to `info`&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; v2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Test&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;User&apos;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Let&apos;s extend our migrate function so it&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// supports v0 and v1 migrations&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;migrate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;oldData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;oldData &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// v0 migration&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// make sure it does not crash when&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// v2 data is passed&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;info &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastName
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// v1 migration&lt;/span&gt;
    newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;info &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; newData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; newData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at our migration function we can see that after two relatively simple migrations its complexity has grown a lot already. It now has to detect the shape of &lt;code class=&quot;language-text&quot;&gt;v0&lt;/code&gt; by checking that the &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; key is not present. It detects &lt;code class=&quot;language-text&quot;&gt;v1&lt;/code&gt; by checking that &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; is present. The logic is already quite hard to make sense of and it requires us to add code comments to be able to understand the code in the future.&lt;/p&gt;
&lt;p&gt;What’s worse though is that we have to add special code so the migrations does not crash, when called with an already migrated object. 😱&lt;/p&gt;
&lt;p&gt;Also, imagine we want to use the &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; key again for storing other data. At that point we cannot use it to detect versions anymore, and we have to come up with even more complex logic to migrate our data. With every change of the migration function we also have to consider that not all users have migrated to the newest version and it has to support migrations of all the different versions of data that are out there, from the first version of our data, to the latest version of our data. 🤯&lt;/p&gt;
&lt;h2&gt;Versioning local data&lt;/h2&gt;
&lt;p&gt;One fix for this is to add a &lt;code class=&quot;language-text&quot;&gt;version&lt;/code&gt; field to our local data, either from the beginning or from the point on where you are writing your first migration. We will use this field to correctly identify the version of the local data and to split up the complexity of our migration function into smaller functions:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// An object with all available version identifiers&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Versions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;three&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// An object containing all available migrations&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// The key represents an available migration for the&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// versioned data at that version.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Each value is a function that migrates a version to&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// the next higher version.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; migrations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Versions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;one&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;v1Data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; v1Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; v1Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastName &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Versions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;two
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Versions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;two&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;v2Data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;v2Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Versions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;three
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Looks at the version of the data and recursively&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// calls `migrate` until there are no more migrations&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// available.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;migrate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; migrationFn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; migrations&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;version&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;migrationFn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;migrate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;migrations&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;version&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; oldData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Versions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;one&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Test&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;User&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Outputs the migrated data at version 3&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;migrated&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;migrate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;oldData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s compare the complexity of the functions in the &lt;code class=&quot;language-text&quot;&gt;migrations&lt;/code&gt; object above to the &lt;code class=&quot;language-text&quot;&gt;migrate&lt;/code&gt; function that we were looking at before. By breaking down the function into several smaller chunks, it becomes much simpler to maintain migrations over time because you will only ever have to think about one migration at a time. That also means, you can now test each migration step in isolation. 🎉&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;migrate&lt;/code&gt; function executes each of these functions in the correct order, until there are no more migrations available and when it reaches that point, your data is migrated. It is required, that you keep the &lt;code class=&quot;language-text&quot;&gt;Versions&lt;/code&gt; and the &lt;code class=&quot;language-text&quot;&gt;migrations&lt;/code&gt; object in sync with your underlying data structure every time you update it. 😉&lt;/p&gt;
&lt;p&gt;In this example, the migration approach is only applied to simple migrations to make it easier to explain. The approach does scale to more complex operations as well. You might organize your frontend data in a more complex &lt;code class=&quot;language-text&quot;&gt;IndexedDB&lt;/code&gt; schema instead of stuffing it all in one giant object. Since you have full control over when and how to call your migrations functions it is possible to have could have different migrations for different shapes of data and to run them on a larger set of objects.&lt;/p&gt;
&lt;p&gt;I hope this little piece of code is helpful for you now or in future projects. It has helped me a lot in my side projects. 🎉&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content:encoded></item><item><title><![CDATA[My favorite (tech) podcasts]]></title><description><![CDATA[Over the last years I’ve been listening to podcasts more and more. Some of them I listen to for pure entertainment, some of them I use to…]]></description><link>https://janmonschke.com/favorite-tech-podcasts-2019</link><guid isPermaLink="false">https://janmonschke.com/favorite-tech-podcasts-2019</guid><pubDate>Wed, 09 Oct 2019 00:00:00 GMT</pubDate><content:encoded>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Over the last years I’ve been listening to podcasts more and more. Some of them I listen to for pure entertainment, some of them I use to learn about new things and trends in software development.&lt;/p&gt;
&lt;p&gt;I often talk about my favorite podcasts with friends and coworkers and they always want to know about other podcasts that I could share with them which is why I want to share these podcasts with you all now. Below you’ll find my current top 10 podcasts, enjoy! 🎉&lt;/p&gt;
&lt;p&gt;If your favorite podcast is missing on this list, I would love to &lt;a href=&quot;/contact&quot;&gt;hear about it&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Tech podcasts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://changelog.com/podcast&quot;&gt;The Changelog&lt;/a&gt;&lt;/strong&gt; was probably the first podcast that I listened to back from when I was still studying in 2010 and I still listen to it to this day. Adam and Jared produce a high quality podcast with a wide variety of topics in their episodes. They invite guests of a popular open source project and they interview them about the background of the project and how it can be useful for listeners. They also create episodes on important current topics like &lt;a href=&quot;https://twitter.com/KimCrayton1&quot;&gt;Kim Crayton&lt;/a&gt;’s &lt;a href=&quot;https://hashtagcauseascene.com/&quot;&gt;#causeascene&lt;/a&gt; movement (&lt;a href=&quot;https://changelog.com/podcast/334&quot;&gt;ep. #334&lt;/a&gt;) or they talked to &lt;a href=&quot;https://twitter.com/dominictarr&quot;&gt;Dominic Tarr&lt;/a&gt; about the &lt;code class=&quot;language-text&quot;&gt;event-stream&lt;/code&gt; compromise (&lt;a href=&quot;https://changelog.com/podcast/326&quot;&gt;ep. #326&lt;/a&gt;). Episodes are usually 1h to 1.5h long.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://changelog.com/jsparty&quot;&gt;JS Party&lt;/a&gt;&lt;/strong&gt; is a spin-off of The Changelog that focuses on JavaScript- and Frontend-related topics. It’s also super well produced and you can feel the hosts are well-prepared for their interview partners. The show features a lot of recurring hosts which is refreshing to hear since podcasts are usually hosted by the same people. Episodes range from 1h to 1.5h, just like The Changelog. Full disclosure: I was a guest on one of their episodes where I talked about the Nested Loops project 😊 (&lt;a href=&quot;https://changelog.com/jsparty/52&quot;&gt;ep. 52&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://reactpodcast.com/&quot;&gt;React Podcast&lt;/a&gt;&lt;/strong&gt; is a podcast that, you might have guessed it from the name already, specializes on React and its ecosystem. The hosts invite authors of popular libraries, they discuss new trends and they talk about experiences of working in tech. I can especially recommend the episodes about Gatsby (&lt;a href=&quot;https://reactpodcast.com/28&quot;&gt;ep. 28&lt;/a&gt;) and The Future of Work (&lt;a href=&quot;https://reactpodcast.com/65&quot;&gt;ep. 65&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://podcasts.apple.com/us/podcast/cyber/id1441708044&quot;&gt;Cyber by Motherboard&lt;/a&gt;&lt;/strong&gt; is a podcast about hacks, breaches, security-vulnerabilities and their impact on modern society. The hosts provide great background-reporting on hacks that you might have heard about on the news and the hacks that you have probably not heard about. My favorite episodes are the ones about a &lt;a href=&quot;https://podcasts.apple.com/us/podcast/the-spyware-sting-operation/id1441708044?i=1000429241547&quot;&gt;spyware sting operation&lt;/a&gt; and where they report about &lt;a href=&quot;https://podcasts.apple.com/us/podcast/how-hackers-break-into-icloud-locked-iphones/id1441708044?i=1000430212873&quot;&gt;how hackers break into iCloud-locked iPhones&lt;/a&gt;. Their episodes are usually around half an hour long.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bonus podcast about cyber security: &lt;a href=&quot;https://www.carbonite.com/podcasts/breach/&quot;&gt;Breach&lt;/a&gt;. A more narrative podcast that currently has two seasons, one in which they talk about the Yahoo hacks and one where they go into detail on the Equifax breach. The reporting in the 2nd season was especially good.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.ecpodcast.io/&quot;&gt;The Entrepreneurial Coder&lt;/a&gt;&lt;/strong&gt; is the newest edition to my podcasts list. On this interview-style podcast, the host interviews other developers about their journey into being self-employed or becoming educators in tech. I love this show because the guests are sharing in detail why they have their own businesses and how they got there. Guests range from developers that offer courses, that wrote books or developers that created their own products and companies and work on them full-time now. My favorite episodes are the ones with Chris Ferdinandi, the author of &lt;a href=&quot;https://gomakethings.com/&quot;&gt;GoMakeThings&lt;/a&gt; and &lt;a href=&quot;https://vanillajsacademy.com/&quot;&gt;Vanilla JS academy&lt;/a&gt; (&lt;a href=&quot;https://www.ecpodcast.io/episodes/11-chris-ferdinandi-building-an-audience-by-being-consistent&quot;&gt;ep. Building an Audience by Being Consistent&lt;/a&gt;), and the episode with Adam Wathan, the author of &lt;a href=&quot;https://refactoringui.com/&quot;&gt;Refactoring UI&lt;/a&gt; (&lt;a href=&quot;https://www.ecpodcast.io/episodes/adam-wathan-creating-and-launching-courses-for-developers&quot;&gt;ep. Creating and Launching Courses for Developers&lt;/a&gt;). Episodes are typically around an hour long.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Non-tech podcasts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://gimletmedia.com/shows/reply-all&quot;&gt;Reply-All&lt;/a&gt;&lt;/strong&gt; is not a tech podcast in the sense of the other ones mentioned above but it still focuses on tech topics but more on the sociological side of tech. All topics are related to internet culture and in each episode, they take a deep dive into a news story or they run an experiment/investigation themselves. My favorite episodes are about the story of Paul Le Roux (&lt;a href=&quot;https://gimletmedia.com/shows/reply-all/dvhd9k/136-the-founder&quot;&gt;ep. The Founder&lt;/a&gt;), the one about a SnapChat thief and modern ways to fish people (&lt;a href=&quot;https://gimletmedia.com/shows/reply-all/49ho5a/130-the-snapchat-thief&quot;&gt;ep. The SnapChat thief&lt;/a&gt;) and their investigation into why some podcasts crash modern car stereo systems (&lt;a href=&quot;https://gimletmedia.com/shows/reply-all/brh8jm/140-the-roman-mars-mazda-virus&quot;&gt;ep. The Roman Mars Mazda Virus&lt;/a&gt;). Episodes are half an hour to an hour long.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.npr.org/podcasts/510289/planet-money&quot;&gt;Planet Money&lt;/a&gt;&lt;/strong&gt; is a super well produced podcast about money, the economy and it’s influence on society and each one of us individually. While economic topics might sound boring to a lot of people, this podcast makes these topics approachable with humor and great story-telling. Ever since my friend &lt;a href=&quot;https://twitter.com/nikgraf&quot;&gt;Nik Graf&lt;/a&gt; recommended this podcast to me at React Conf 2016, I’ve been a subscriber and listen to their newest episodes almost every week! My highlight episodes are the ones about India getting rid of most of their cash (&lt;a href=&quot;https://www.npr.org/2019/09/25/764433918/episode-770-when-indias-cash-disappeared&quot;&gt;ep. 770&lt;/a&gt;), the invention of Duty Free (&lt;a href=&quot;https://www.npr.org/sections/money/2018/05/11/610516972/episode-841-the-land-of-duty-free&quot;&gt;ep. 841&lt;/a&gt;) and their visit to the Libertarian summer camp (&lt;a href=&quot;https://www.npr.org/sections/money/2017/06/28/534735727/episode-286-libertarian-summer-camp&quot;&gt;ep. 286&lt;/a&gt;). Episodes are usually 20min to half an hour long.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.heavensgate.show/&quot;&gt;Heaven’s Gate&lt;/a&gt;&lt;/strong&gt; is a single season narrative podcast that is about the history of the Heaven’s Gate cult. The host, Glynn Washington, who has also been part of another cult, explains the inner workings of this cult and interviews ex-members about their experiences. Each episode is told in a very captivating way and once you start listening, it’s hard to stop because you want to know how all the pieces come together in the end. This podcast was recommended to me by my dear friend &lt;a href=&quot;https://twitter.com/jypyk&quot;&gt;Jeremy&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://gimletmedia.com/shows/the-habitat&quot;&gt;The Habitat&lt;/a&gt;&lt;/strong&gt; was recommended to me by &lt;a href=&quot;https://twitter.com/carolstran&quot;&gt;Carolyn&lt;/a&gt; and I binged it in just a couple of days. The show follows people that lived in a real-world Mars habitat on planet earth for a year. Goal of this experiment was to find out how life on Mars might be like. It’s only a single season of six episodes of which each is around 30min long.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</content:encoded></item><item><title><![CDATA[Garbage Collection in Redux Applications]]></title><description><![CDATA[The topic that I focused on a lot in my recent conference talks was garbage collection in Redux applications. At work we built a full…]]></description><link>https://janmonschke.com/garbage-collection-in-redux-applications</link><guid isPermaLink="false">https://janmonschke.com/garbage-collection-in-redux-applications</guid><pubDate>Wed, 02 Oct 2019 00:00:00 GMT</pubDate><content:encoded>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;The topic that I focused on a lot in my &lt;a href=&quot;/#talks&quot;&gt;recent conference talks&lt;/a&gt; was garbage collection in Redux applications. At &lt;a href=&quot;https://soundcloud.com&quot;&gt;work&lt;/a&gt; we built a full-fledged Xbox application in React with Redux.&lt;/p&gt;
&lt;p&gt;Building for the Xbox runtime is a tricky business for web apps that should run in the background when games are playing because they available memory for your app is very limited and your web app shares the memory with the browser process that needs to be active. When your app is over the maximum budget of 128 MB, the OS might decide to just kill your app, even when it’s playing music. This is not a lot of memory when you consider that the browser process eats most of it.&lt;/p&gt;
&lt;p&gt;Usually, memory is not a big concern when building web apps, but in our case we were dealing with an application that is often running for several hours in the background and might not even be closed for several days in some cases. We noticed that our Redux store kept on growing and growing while the user was listening to more music and especiall when searching for new songs a lot.&lt;/p&gt;
&lt;p&gt;That’s why we came up with a system to identify unused state in our Redux store that then automatically removes those objects when they’re not needed anymore. Our solution involved:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;normalization of the store object&lt;/li&gt;
&lt;li&gt;keeping track of active selectors&lt;/li&gt;
&lt;li&gt;a custom garbage collection algorithm&lt;/li&gt;
&lt;li&gt;finding the right moment to remove unused state&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wrote about our approach in length on the SoundCloud developer blog, you can check it out there if you are interested :)&lt;/p&gt;
&lt;p&gt;→ &lt;a href=&quot;https://developers.soundcloud.com/blog/garbage-collection-in-redux-applications&quot;&gt;developers.soundcloud.com/blog/garbage-collection-in-redux-applications&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let me know on &lt;a href=&quot;https://twitter.com/thedeftone&quot;&gt;Twitter&lt;/a&gt; what you think about it and if you have any questions about the solution.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content:encoded></item><item><title><![CDATA[Building a minimal i18n library]]></title><description><![CDATA[I am currently building the website for my wedding next year which has to be translated into English, German and French to make the…]]></description><link>https://janmonschke.com/building-a-minimal-i18n-library</link><guid isPermaLink="false">https://janmonschke.com/building-a-minimal-i18n-library</guid><pubDate>Mon, 10 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;I am currently building the website for &lt;a href=&quot;https://twitter.com/thedeftone/status/1034480375781830656&quot;&gt;my wedding next year&lt;/a&gt; which has to be translated into English, German and French to make the information accessible for all our guests.&lt;/p&gt;
&lt;p&gt;From work I know about the significance of internationalization (i18n) but also about the complexity of the topic. Which is why I started to look for libraries that were lightweight and easy to use. I quickly found myself in a deep rabbit hole, comparing the feature set of the big libraries like &lt;a href=&quot;https://formatjs.io/&quot;&gt;Format.js&lt;/a&gt;, &lt;a href=&quot;https://github.com/i18next/i18next&quot;&gt;i18next&lt;/a&gt; and small ones like &lt;a href=&quot;https://github.com/airbnb/polyglot.js&quot;&gt;polyglot.js&lt;/a&gt;. &lt;code class=&quot;language-text&quot;&gt;Format.js&lt;/code&gt; would be my go-to solution for a production app but I found that its setup and the translation format would be overkill for my tiny website. The same was true for &lt;code class=&quot;language-text&quot;&gt;i18next&lt;/code&gt;. Even &lt;code class=&quot;language-text&quot;&gt;polyglot.js&lt;/code&gt; offered too much functionality (e.g. support for all kinds of pluralizations that I knew I did not have to support) for what I needed.&lt;/p&gt;
&lt;p&gt;At that point I took a step back and began to formulate the structure for an i18n library that would suit my minimal requirements. What I essentially needed was a function that, when given a translation key, would return a string translated in the users language.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;bus_tickets&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; Your bus tickets&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Detecting the user’s language&lt;/h2&gt;
&lt;p&gt;This raised the question: how do I detect the user’s desired language. I knew about the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Headers/Accept-Language&quot;&gt;Accept-Language HTTP header&lt;/a&gt; but since my website does not have a server, I was not able to use that header so I used &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/NavigatorLanguage/language&quot;&gt;navigator.language&lt;/a&gt; which returns the language that the browser is set to.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; defaultLocale &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;en&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; userLocale &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;language &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;userLanguage &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;browserLanguage&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next step was to match the the user’s language to one of the languages that I was translating, or, if the user’s language was not supported, to fall back to the default locale. The matching is kept simple here on purpose because the locales that I would support are pretty simple. I was also not planning on adding special translations in cases like &lt;code class=&quot;language-text&quot;&gt;de_AT&lt;/code&gt; (Austrian German) or &lt;code class=&quot;language-text&quot;&gt;fr_CA&lt;/code&gt; (French Canadian). (If you’re planning on localizing your product’s website, you should definitely consider adding support for those locales!)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; supportedLocales &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;defaultLocale&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;de&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;fr&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getSupportedLocale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;supported&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; userLocale&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// simple string match of the locale&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; locale &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; supported&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;
    userLocale&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;loc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; locale &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; fallback&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; locale &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getSupportedLocale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;supportedLocales&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; userLocale&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; defaultLocale&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Getting static translations&lt;/h2&gt;
&lt;p&gt;Great, now we have the user’s locale! In order to get a translated string, we now have to set up a data structure for our translations. The structure that I selected does purposely not adhere to a standard like the gettext format (&lt;a href=&quot;https://www.gnu.org/software/gettext/manual/html_node/PO-Files.html&quot;&gt;PO files&lt;/a&gt;) or the &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;ICU message format&lt;/a&gt;. Those formats are great, but I did not want to integrate a parser or a runtime for my translation system. (Again, if you build a real product, you should use those formats, I can’t stress that enough 😅).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; translations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;bus_tickets&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Your bus tickets&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Deine Bustickets&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Tes billets pour le bus&apos;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only thing missing to get translated strings is the translation function itself. That function takes the user’s locale and looks up the translation from our &lt;code class=&quot;language-text&quot;&gt;translations&lt;/code&gt; object.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;translationKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; translations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; strings&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;translationKey&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;translations&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// The translation in the user&apos;s locale&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; localized &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; translations&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;userLocale&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// The translation in the default locale&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; defaultString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; translations&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;defaultLocale&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;localized&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; localized&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;defaultString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; defaultString&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I would only have to support static strings, this is where I could have stopped 🎉 Our website however does have interactive elements so I had to add support for interpolated strings.&lt;/p&gt;
&lt;h2&gt;Interpolated strings&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;singed_in_as&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;your@email.com&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; Signed in as: your@email.com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To keep things simple, I used JavaScript &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;template literals&lt;/a&gt; for interpolation which from a developer’s perspective is pretty neat, but from a security perspective is pretty bad since it might allow for &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS attacks&lt;/a&gt; if not used correctly. I debated the risk and came to the conclusion that the risk is very low in my case since I am rendering the translations as children of React nodes, which does have XSS protection built in.&lt;/p&gt;
&lt;p&gt;Leveraging functionality of template literals, interpolated strings are defined as follows in my translations object:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; translations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;signed_in_as&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Signed in as: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Eingeloggt als: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Connecté en tant que: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Plurals&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;bus_tickets_booked&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; You have booked 2 tickets&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding support for pluralization was a bit more tricky than adding interpolations because it requires you to take the pluralization rules of each language into account. In English and German for example you use the singular form when the quantity is exactly one and then you use the plural form for zero quantiries and for quantities that are bigger than one. However, different rules apply for French. There you use the singular form for quantities of zero and one and then the plural for everything that is more than one.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; translations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;bus_tickets_booked&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pluralize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;You have booked one ticket&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;You have booked &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;num&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; tickets&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pluralize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Tu as réservé &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;num&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; ticket&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Tu as réservé &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;num&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; tickets&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Translations that require pluralization, are wrapped with the &lt;code class=&quot;language-text&quot;&gt;pluralize&lt;/code&gt; helper that selects the correct plural/singular form for the user’s language.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;indexEN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;indexFR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pluralIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; indexEN&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; indexEN&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; indexFR
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pluralize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;translationArr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pluralIndex&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;locale&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; translationFn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; translationArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;translationFn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arguments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;pluralize&lt;/code&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Currying&quot;&gt;curries&lt;/a&gt; the actual translation interpolation function. It selects the correct index function for the current locale and then returns the translation index.&lt;/p&gt;
&lt;p&gt;The concept of selecting the index of a translation array, is not a concept that I came up with but that is very common for translation libraries. The rules for these indices can be looked up in the &lt;a href=&quot;https://www.unicode.org/cldr/charts/34/supplemental/language_plural_rules.html&quot;&gt;CLDR pluralization rules documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my case I only have to support English, German and French that all have only two cases: singular and plural. If we would have to support Russian or Arabic, I’d have to provide more translation for different cases of plurals. Russian for example has four cases: singular, few, many and other. Adding support for a new language would only require providing a new index selector for that language.&lt;/p&gt;
&lt;h2&gt;Setting the locale&lt;/h2&gt;
&lt;p&gt;Now that static translations, interpolations and plurals are implemented, the only thing that was missing was to allow the user to select a preferred locale. This is an absolute requirement for translated websites. When we were parsing the user’s language, we were just making an informed guess as to which language they might prefer. We don’t know if the user would actually prefer to read our website in English, even though their browser language is set to French and we should let them decide.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setLocale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newLocale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  locale &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newLocale&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;locale&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; newLocale&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The solution for this is to add a language selector to your page that either sets a cookie or that stores the selected locale in &lt;code class=&quot;language-text&quot;&gt;localStorage&lt;/code&gt; so that you can read out the user’s preference when deciding which language to render. That only adds a couple of lines to our initial guess of the userLocale:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getStoredLocale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// try getting the locale from local storage&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;locale&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; userLocale &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getStoredLocale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;
  navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;language &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;
  navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;userLanguage &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;
  navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;browserLanguage&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;How to use the library&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; t &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./translations&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SignInInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; user &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Fragment&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;signed_in_as&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;signIn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SignOutButton&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Fragment&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to use translations in your views, simply call the &lt;code class=&quot;language-text&quot;&gt;t&lt;/code&gt; function with your translation key and, if required, additional parameters for interpolation or pluralization.&lt;/p&gt;
&lt;p&gt;You can use the library with any JavaScript framework that you like. In my case it’s &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt;, but it would work just as good with &lt;code class=&quot;language-text&quot;&gt;Vue.js&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Angular&lt;/code&gt; or whichever hto new JS framework there is these days (&lt;code class=&quot;language-text&quot;&gt;Backbone&lt;/code&gt; anyone? 😉).&lt;/p&gt;
&lt;p&gt;Check out this &lt;a href=&quot;https://glitch.com/~minimal-i18n-library&quot;&gt;Glitch project&lt;/a&gt; for an example project and find the code on GitHub: &lt;a href=&quot;https://github.com/janmonschke/minimal-i18n&quot;&gt;https://github.com/janmonschke/minimal-i18n&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Did I save time by skipping the setup of one of the established i18n libraries by writing my own library? Most probably not 😄! But I did learn a lot about internationalization in general and feel like I have a lot more empathy now with users that use translated products and that have to deal with wrong translations constantly. I feel like I will pay a lot more attention to how I use translations at work now.&lt;/p&gt;
&lt;p&gt;Once more: the library was only built for a tiny website and mainly for educational purposes so please don’t use it in your production projects. Depending on how you use the library, it’s a potential source for XSS attacks and there are plenty of basic features that it does not support yet (e.g. multiple plurals in a single sentence).&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content:encoded></item><item><title><![CDATA[Simulations in JavaScript]]></title><description><![CDATA[I recently came across the 2014’s JSConf.asia videos on YouTube and found two remarkable presentation that only very few people started to…]]></description><link>https://janmonschke.com/blog/2015/01/14/simulations-in-javascript.html</link><guid isPermaLink="false">https://janmonschke.com/blog/2015/01/14/simulations-in-javascript.html</guid><pubDate>Wed, 14 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;I recently came across the 2014’s JSConf.asia videos on YouTube and found two remarkable presentation that only very few people started to talk about on Twitter or in Meetups. Both talks deal with different ways of simulating ‘worlds’ in JavaScript and involve interesting rendering techniques, useful algorithms and beautiful visualizations. First I will show Simon Swain’s (&lt;a href=&quot;https://twitter.com/simon_swain&quot;&gt;@simon_swain&lt;/a&gt;) talk about Deep Space simulations (&lt;a href=&quot;https://www.youtube.com/watch?v=0HJPilemNns&quot;&gt;YouTube&lt;/a&gt;) and then Vince Allen’s (&lt;a href=&quot;https://twitter.com/vinceallenvince&quot;&gt;@vinceallenvince&lt;/a&gt;) talk about Pixel Art and complex systems (&lt;a href=&quot;https://www.youtube.com/watch?v=mrxsD0mCpZ4&quot;&gt;YouTube&lt;/a&gt;). I encourage you to watch both videos after reading this post because for the sake of simplicity I had to leave out tons of stuff such as Vince’s art background.&lt;/p&gt;
&lt;h2&gt;Deep Space&lt;/h2&gt;
&lt;p&gt;Simon Swain starts his talk off with an example implementation of &lt;a href=&quot;http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot;&gt;Conway’s Game of Life&lt;/a&gt; which is a simulation of ‘cells’. In each cycle a cell either dies, is born or lives based on four rules which depend on the neighboring cells. This system looks rather uncomplicated but it can create complex structures of cells that form bigger cell mechanisms which move across the field as a whole. Like for many people that studied CS, Game of Life was probably one of the first assignments in university and it is great to see the beauty of Simon’s visualizations, whereas I for example only built a version of Life that ran in the console. I especially liked his variation of Life which includes rabbit and wolf cells. When Swain adds the ability for rabbits to breed and for wolves to kill rabbits, the occurring populations of animals are similar to the populations in biological systems.&lt;/p&gt;
&lt;video controls=&quot;&quot; loop=&quot;&quot;&gt;
  &lt;source src=&quot;/b01aafa49e8d23b2477b9331d6fd6704/gol.webm&quot; type=&quot;video/webm&quot;&gt;
&lt;/video&gt;
&lt;p&gt;Simon goes on by showing a custom economy simulation which is based upon four main properties: population, agriculture, industry and pollution. They all influence each other and those dependencies are created in a way so that, even if they influence each other in a bad way, after a certain amount of time a balance is recreated. In addition to an economy simulation Simon then adds the ability to create imaginary space ships which fly a certain amount of the population to a new world.&lt;/p&gt;
&lt;video controls=&quot;&quot; loop=&quot;&quot;&gt;
  &lt;source src=&quot;/e175de41791369e8b4afd1c941c04cef/economy.webm&quot; type=&quot;video/webm&quot;&gt;
&lt;/video&gt;
&lt;p&gt;After introducing his basic render-loop, Simon introduces the concept of &lt;a href=&quot;http://en.wikipedia.org/wiki/Boids&quot;&gt;Boids&lt;/a&gt;. Boids were created to simulate the moving behavior of animals that travel in flocks. Each object moves depending on three main concepts which involves looking at the position at other Boids in a flock. In this way, a very natural flocking and moving behavior can be achieved. The resulting flock movement looks astonishing and bears a resemblance to a shark swimming in the ocean.&lt;/p&gt;
&lt;video controls=&quot;&quot; loop=&quot;&quot;&gt;
  &lt;source src=&quot;/c2382e2f4e8773aee6a9493c116a5af1/boids.webm&quot; type=&quot;video/webm&quot;&gt;
&lt;/video&gt;
&lt;p&gt;But Simon’s goal is not to recreate the biologically correct behavior of animals. He creates space ships from boids that have the ability to fight with other space ships. In addition to that he adds the economy simulation so that in combination he has planets of different parties that are able to create spaceships and to populate planets around their home planet. Unless those planets are guarded by other space ships. In this case they have to fight their enemies. Again: each planet in the animation below is running it’s own economy!&lt;/p&gt;
&lt;video controls=&quot;&quot; loop=&quot;&quot;&gt;
  &lt;source src=&quot;/2431dc1a8bf3ec338f6cbd8154b2adc1/spaceships.webm&quot; type=&quot;video/webm&quot;&gt;
&lt;/video&gt;
&lt;p&gt;The natural evolution of this system is, of course, hyperspace travel! Simon creates seven of the systems like seen above and lets three parties start in a different system simultaneously. When a party has created enough resources it can send populations to other systems to grow across solar systems. This leads to very interesting interaction between parties and simulations can last for several minutes until one party dominates all others.&lt;/p&gt;
&lt;video controls=&quot;&quot; loop=&quot;&quot;&gt;
  &lt;source src=&quot;/81623123811e169ccea3ea6908cd77fa/hyperspace.webm&quot; type=&quot;video/webm&quot;&gt;
&lt;/video&gt;
&lt;p&gt;You can play around with Simon’s space simulation &lt;a href=&quot;http://simonswain.com/deepspace/&quot;&gt;here&lt;/a&gt;. It surely is great fun to see this war of the worlds play out in a browser!&lt;/p&gt;
&lt;h2&gt;Complex Systems&lt;/h2&gt;
&lt;p&gt;[&lt;a href=&quot;http://vinceallenvince.github.io/jsasia2014/&quot;&gt;slides&lt;/a&gt;, &lt;a href=&quot;http://vinceallenvince.github.io/jsasia2014/&quot;&gt;demos&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Vince Allen started his talk by introducing the audience to a very unique technique to render pixels onto a website. A technique which doesn’t make use of canvas, images or SVG. He uses a &lt;code class=&quot;language-text&quot;&gt;single DIV element&lt;/code&gt; to program very complex animations by manipulating the element’s &lt;code class=&quot;language-text&quot;&gt;box-shadow&lt;/code&gt; property &lt;a href=&quot;https://www.youtube.com/watch?v=mrxsD0mCpZ4#t=437&quot;&gt;(7:17) “bit-shadow machine”&lt;/a&gt;. A box shadow can be manipulated in a way so that it has the &lt;code class=&quot;language-text&quot;&gt;shape of a square&lt;/code&gt; at an arbitrary position with arbitrary properties such as color and blur. In addition to that, DIV elements can have an arbitrary amount of box-shadow declarations which allows to display several squares on a webpage although the page’s body only contains one DIV element.&lt;/p&gt;
&lt;p&gt;Vince doesn’t stop there and uses this rendering technique to visualize various simulations he created.&lt;/p&gt;
&lt;p&gt;The first one is a simulation of a tornado &lt;a href=&quot;https://www.youtube.com/watch?v=mrxsD0mCpZ4#t=743&quot;&gt;(12:23)&lt;/a&gt; that he creates from very simple core elements such as a base and a spine. The tornado’s movement and the spine are both generated from the &lt;a href=&quot;http://en.wikipedia.org/wiki/Perlin_noise&quot;&gt;Perlin noise&lt;/a&gt; algorithm which creates ‘natural’ random values. Different variations of the simulation show how a very natural effect and truly beautiful visualizations can result from a simple rendering technique and a simple random number generator.&lt;/p&gt;
&lt;video controls=&quot;&quot; loop=&quot;&quot;&gt;
  &lt;source src=&quot;/e218a3a50547aab3c1b6d8599723c426/tornado.webm&quot; type=&quot;video/webm&quot;&gt;
&lt;/video&gt;
&lt;p&gt;Vince then shows two more demos: an alternative version of the sheep vs. wolf simulation &lt;a href=&quot;https://www.youtube.com/watch?v=mrxsD0mCpZ4#t=1341&quot;&gt;(22:21)&lt;/a&gt; which Simon showed as well and a termite simulation &lt;a href=&quot;https://www.youtube.com/watch?v=mrxsD0mCpZ4#t=1632&quot;&gt;(27:12)&lt;/a&gt;. Both of them are based on the concept of &lt;a href=&quot;http://en.wikipedia.org/wiki/Braitenberg_vehicle&quot;&gt;Braitenberg vehicles&lt;/a&gt;, ‘vehicles’ that only consist of a sensor and a motor. Stimulation of the sensor (or alternatively the sensors) leads to a reaction of the motor. The resulting new position towards other objects then creates a new stimulation of the sensor which will again create a reaction of the motor. These two elementary concepts lead in interesting visualizations. Especially when the sheep/wolf demo is enhanced by another entity, Zombies &lt;a href=&quot;https://www.youtube.com/watch?v=mrxsD0mCpZ4#t=1435&quot;&gt;(23:55)&lt;/a&gt;:&lt;/p&gt;
&lt;video controls=&quot;&quot; loop=&quot;&quot;&gt;
  &lt;source src=&quot;/8b50b2855db865048fe15435ade2f146/wolvessheepzombies.webm&quot; type=&quot;video/webm&quot;&gt;
&lt;/video&gt;
&lt;p&gt;Just as a reminder: The demos above are also rendered as multiple box-shadows of only a single div element.&lt;/p&gt;
&lt;p&gt;Another outstanding element of Vince’s talk is that he uses Photoshop to render videos of his simulations. In this way he can create HD-quality videos with realistic motion blur and shallow depth of field. He uses node.js to feed Adobe Generator with positional data from each frame of the visualization. Adobe Generator then creates high-resolution Photoshop images from that data. Those images can then be concatenated into a video &lt;a href=&quot;https://www.youtube.com/watch?v=mrxsD0mCpZ4#t=1034&quot;&gt;(17:14)&lt;/a&gt;. Oh, and did I mention that he uses the Web Audio API for atmospheric background noise generation? ;) His noise library is called Soundbed and can be found on &lt;a href=&quot;https://github.com/vinceallenvince/soundbed&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/da69ef9ed4875fc1dc2fdd843b300386/507e6/photoshop-and-js.webp 200w,
https://janmonschke.com/static/da69ef9ed4875fc1dc2fdd843b300386/28a80/photoshop-and-js.webp 400w,
https://janmonschke.com/static/da69ef9ed4875fc1dc2fdd843b300386/8d2ea/photoshop-and-js.webp 800w,
https://janmonschke.com/static/da69ef9ed4875fc1dc2fdd843b300386/68fc1/photoshop-and-js.webp 1200w,
https://janmonschke.com/static/da69ef9ed4875fc1dc2fdd843b300386/43d96/photoshop-and-js.webp 1600w,
https://janmonschke.com/static/da69ef9ed4875fc1dc2fdd843b300386/3c9de/photoshop-and-js.webp 1702w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/da69ef9ed4875fc1dc2fdd843b300386/37402/photoshop-and-js.jpg 200w,
https://janmonschke.com/static/da69ef9ed4875fc1dc2fdd843b300386/4cda9/photoshop-and-js.jpg 400w,
https://janmonschke.com/static/da69ef9ed4875fc1dc2fdd843b300386/c60e9/photoshop-and-js.jpg 800w,
https://janmonschke.com/static/da69ef9ed4875fc1dc2fdd843b300386/6c738/photoshop-and-js.jpg 1200w,
https://janmonschke.com/static/da69ef9ed4875fc1dc2fdd843b300386/56dca/photoshop-and-js.jpg 1600w,
https://janmonschke.com/static/da69ef9ed4875fc1dc2fdd843b300386/21e5a/photoshop-and-js.jpg 1702w&quot; sizes=&quot;&quot; type=&quot;image/jpeg&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/da69ef9ed4875fc1dc2fdd843b300386/c60e9/photoshop-and-js.jpg&quot; alt=&quot;Photoshop and JavaScript&quot; title=&quot;Photoshop and JavaScript&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Both talks show that it can be really fun to work on algorithms and to visualize the results. In their cases, they created systems with agents which were acting based on simple rules. The visualizations of these systems can be mesmerizing for example when the sheep/wolves/zombies system creates a state of equilibrium &lt;a href=&quot;https://www.youtube.com/watch?v=mrxsD0mCpZ4#t=1563&quot;&gt;(26:13, Vince)&lt;/a&gt; or when introducing hyperspace travel to the deep space simulation which results in a minutes-long fight over solar systems &lt;a href=&quot;https://www.youtube.com/watch?v=0HJPilemNns#t=1421&quot;&gt;(23:41, Simon)&lt;/a&gt;. Changes in those systems result in an immediate, sometimes very artistic, change in visualization and behavior.&lt;/p&gt;
&lt;p&gt;I hope we will see more simulations like these in the future. With people like Vince and Simon talking at various JS conferences all over the world I’m confident that we will see more of it very soon :)&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content:encoded></item><item><title><![CDATA[Web Audio Hackday 2014]]></title><description><![CDATA[Earlier this year Jan Lehnardt, Rin, Robin, Tiffany and me started to talk about making something special for the upcoming JSConf.eu (201…]]></description><link>https://janmonschke.com/blog/2014/10/03/web-audio-hackday-2014.html</link><guid isPermaLink="false">https://janmonschke.com/blog/2014/10/03/web-audio-hackday-2014.html</guid><pubDate>Fri, 03 Oct 2014 00:00:00 GMT</pubDate><content:encoded>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Earlier this year &lt;a href=&quot;https://twitter.com/janl&quot;&gt;Jan Lehnardt&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/rinpaku&quot;&gt;Rin&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/rmehner&quot;&gt;Robin&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/theophani&quot;&gt;Tiffany&lt;/a&gt; and me started to talk about making something special for the upcoming JSConf.eu (2014). Our idea was to organize a JSFest in Berlin around the three big conferences in September (Reject.JS, CSSConf.eu and JSConf.eu) which would host a range of web-related Meetups and Events.&lt;/p&gt;
&lt;p&gt;For more than two years I have been obsessed with writing things with the Web Audio API which is becoming more and more stable and is supported by more and more browsers. I wanted to share my enthusiasm for this API by creating a Web Audio Hackathon during JSFest. Since I never organised an event before, Tiffany, who is familiar with all the processes that are needed to create big events like JSConf.eu, joined the organiser team and we started planning very soon.&lt;/p&gt;
&lt;p&gt;The event took place at the SoundCloud HQ in Berlin in the wonderful classroom :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;everybodyworking3.jpg&quot;&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/a2dc2ae2ba2bebb4d3612d44dd9b35e4/507e6/everybodyworking3.webp 200w,
https://janmonschke.com/static/a2dc2ae2ba2bebb4d3612d44dd9b35e4/28a80/everybodyworking3.webp 400w,
https://janmonschke.com/static/a2dc2ae2ba2bebb4d3612d44dd9b35e4/8d2ea/everybodyworking3.webp 800w,
https://janmonschke.com/static/a2dc2ae2ba2bebb4d3612d44dd9b35e4/53334/everybodyworking3.webp 1024w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/a2dc2ae2ba2bebb4d3612d44dd9b35e4/37402/everybodyworking3.jpg 200w,
https://janmonschke.com/static/a2dc2ae2ba2bebb4d3612d44dd9b35e4/4cda9/everybodyworking3.jpg 400w,
https://janmonschke.com/static/a2dc2ae2ba2bebb4d3612d44dd9b35e4/c60e9/everybodyworking3.jpg 800w,
https://janmonschke.com/static/a2dc2ae2ba2bebb4d3612d44dd9b35e4/c3413/everybodyworking3.jpg 1024w&quot; sizes=&quot;&quot; type=&quot;image/jpeg&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/a2dc2ae2ba2bebb4d3612d44dd9b35e4/c60e9/everybodyworking3.jpg&quot; alt=&quot;The SoundCloud classroom&quot; title=&quot;The SoundCloud classroom&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We were able to have three amazing speakers from Mozilla and Google which introduced attendees to the Web Audio API and the Web Midi API. To be honest, I was &lt;a href=&quot;https://twitter.com/thedeftone/status/498877909525090304&quot;&gt;pretty&lt;/a&gt; &lt;a href=&quot;https://twitter.com/thedeftone/status/497779074585329664&quot;&gt;stoked&lt;/a&gt; to have the three of them talking at the event because they have always been my Web Audio Heroes &amp;lt;3&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/supersole&quot;&gt;Soledad Penadés&lt;/a&gt; gave a very insightful introduction to the Web Audio API that was suited for both beginners and more advanced users. Since most of the 30 attendees were novice users this was perfect. I especially liked her very creative way of explaining the core features of the Web Audio API as &lt;a href=&quot;http://soledadpenades.com/files/t/berlin-webaudio-hackday-2014/#38&quot;&gt;Super Powers&lt;/a&gt; and her description and demonstration of LFOs as &lt;a href=&quot;http://soledadpenades.com/files/t/berlin-webaudio-hackday-2014/#54&quot;&gt;spooky sounds&lt;/a&gt; :) The slides can be found &lt;a href=&quot;http://soledadpenades.com/files/t/berlin-webaudio-hackday-2014/&quot;&gt;here&lt;/a&gt; and a recording of her talk from a Mozilla event can be found &lt;a href=&quot;https://air.mozilla.org/introduction-to-web-audio/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;soletalking.jpg&quot;&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/13072ab6397e62d71e797fda6445871e/507e6/soletalking.webp 200w,
https://janmonschke.com/static/13072ab6397e62d71e797fda6445871e/28a80/soletalking.webp 400w,
https://janmonschke.com/static/13072ab6397e62d71e797fda6445871e/8d2ea/soletalking.webp 800w,
https://janmonschke.com/static/13072ab6397e62d71e797fda6445871e/53334/soletalking.webp 1024w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/13072ab6397e62d71e797fda6445871e/37402/soletalking.jpg 200w,
https://janmonschke.com/static/13072ab6397e62d71e797fda6445871e/4cda9/soletalking.jpg 400w,
https://janmonschke.com/static/13072ab6397e62d71e797fda6445871e/c60e9/soletalking.jpg 800w,
https://janmonschke.com/static/13072ab6397e62d71e797fda6445871e/c3413/soletalking.jpg 1024w&quot; sizes=&quot;&quot; type=&quot;image/jpeg&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/13072ab6397e62d71e797fda6445871e/c60e9/soletalking.jpg&quot; alt=&quot;Soledad giving an introduction to Web Audio&quot; title=&quot;Soledad giving an introduction to Web Audio&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then, &lt;a href=&quot;https://twitter.com/jsantell&quot;&gt;Jordan Santell&lt;/a&gt; introduced us to the Web Audio debugging tools that he wrote for Firefox. I can still remember my first steps with the Web Audio API. My computer was making all these weird noises and my typical &lt;code class=&quot;language-text&quot;&gt;debugger-driven&lt;/code&gt; development work flow didn’t work because audio is processed in its own thread and won’t stop for debuggers. His tools would’ve made debugging much much easier! &lt;a href=&quot;http://jsantell.github.io/web-audio-tools-presentation/&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;jordantalking.jpg&quot;&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/dc6a7335bd2d5c8ae23e54e6fa47b4b6/507e6/jordantalking.webp 200w,
https://janmonschke.com/static/dc6a7335bd2d5c8ae23e54e6fa47b4b6/28a80/jordantalking.webp 400w,
https://janmonschke.com/static/dc6a7335bd2d5c8ae23e54e6fa47b4b6/8d2ea/jordantalking.webp 800w,
https://janmonschke.com/static/dc6a7335bd2d5c8ae23e54e6fa47b4b6/53334/jordantalking.webp 1024w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/dc6a7335bd2d5c8ae23e54e6fa47b4b6/37402/jordantalking.jpg 200w,
https://janmonschke.com/static/dc6a7335bd2d5c8ae23e54e6fa47b4b6/4cda9/jordantalking.jpg 400w,
https://janmonschke.com/static/dc6a7335bd2d5c8ae23e54e6fa47b4b6/c60e9/jordantalking.jpg 800w,
https://janmonschke.com/static/dc6a7335bd2d5c8ae23e54e6fa47b4b6/c3413/jordantalking.jpg 1024w&quot; sizes=&quot;&quot; type=&quot;image/jpeg&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/dc6a7335bd2d5c8ae23e54e6fa47b4b6/c60e9/jordantalking.jpg&quot; alt=&quot;Jordan talking about Web Audio debugging&quot; title=&quot;Jordan talking about Web Audio debugging&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/cwilso&quot;&gt;Chris Wilson&lt;/a&gt; did the last talk and he introduced us to the Web Midi API. It took some time to set this talk up because he took a ton of devices to showcase the capabilities of the API (as you can see on the picture underneath). It was like as if he was the secret 4th member of &lt;a href=&quot;https://soundcloud.com/theglitchmob&quot;&gt;The Glitch Mob&lt;/a&gt;! His &lt;a href=&quot;http://webaudiodemos.appspot.com/slides/webmidi.html&quot;&gt;Slides&lt;/a&gt; are full of demos and are perfectly suitable if you want to get started with Midi on the web right away :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;christalking.jpg&quot;&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/abecf33a5d7bbdee5ac06f06d95cd95c/507e6/christalking.webp 200w,
https://janmonschke.com/static/abecf33a5d7bbdee5ac06f06d95cd95c/28a80/christalking.webp 400w,
https://janmonschke.com/static/abecf33a5d7bbdee5ac06f06d95cd95c/8d2ea/christalking.webp 800w,
https://janmonschke.com/static/abecf33a5d7bbdee5ac06f06d95cd95c/53334/christalking.webp 1024w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/abecf33a5d7bbdee5ac06f06d95cd95c/37402/christalking.jpg 200w,
https://janmonschke.com/static/abecf33a5d7bbdee5ac06f06d95cd95c/4cda9/christalking.jpg 400w,
https://janmonschke.com/static/abecf33a5d7bbdee5ac06f06d95cd95c/c60e9/christalking.jpg 800w,
https://janmonschke.com/static/abecf33a5d7bbdee5ac06f06d95cd95c/c3413/christalking.jpg 1024w&quot; sizes=&quot;&quot; type=&quot;image/jpeg&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/abecf33a5d7bbdee5ac06f06d95cd95c/c60e9/christalking.jpg&quot; alt=&quot;Chris talking about Web Midi&quot; title=&quot;Chris talking about Web Midi&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After all the talks we had time for a little lunch altogether before we started the hack sessions. In addition to providing the location and drinks, SoundCloud sponsored tasty and healthy lunch snacks for all of us :)&lt;/p&gt;
&lt;p&gt;Some groups formed during lunch and people started hacking right away. People were really focused and it was the perfect working atmosphere in the room. Sometimes there were weird noises coming from several computers when the attendees were trying out oscillators and audio parameters :) I did not really have time to work on a project on my own because I was still preparing my &lt;a href=&quot;http://janmonschke.com/JSConf2014/&quot;&gt;slides&lt;/a&gt; for &lt;a href=&quot;http://2014.jsconf.eu/speakers/#/speakers/jan-monschke-using-the-web-for-music-production-and-for-live-performances&quot;&gt;JSConf.eu&lt;/a&gt;. In addition to the speakers, we also had coaches (&lt;a href=&quot;https://github.com/chrisguttandin&quot;&gt;Chris&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/woodworker&quot;&gt;Martin&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/halfbyte&quot;&gt;Jan&lt;/a&gt;) helping the attendees with their projects. My favourite moment was when Chris Wilson was explaining details about audio, in the old fashioned way on a white board and people were gathering around him, listening closely:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;chriswilsonexplainingthings.jpg&quot;&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/69d89d3110363aa4cbbc462f95eb11bc/507e6/chriswilsonexplainingthings.webp 200w,
https://janmonschke.com/static/69d89d3110363aa4cbbc462f95eb11bc/28a80/chriswilsonexplainingthings.webp 400w,
https://janmonschke.com/static/69d89d3110363aa4cbbc462f95eb11bc/8d2ea/chriswilsonexplainingthings.webp 800w,
https://janmonschke.com/static/69d89d3110363aa4cbbc462f95eb11bc/53334/chriswilsonexplainingthings.webp 1024w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/69d89d3110363aa4cbbc462f95eb11bc/37402/chriswilsonexplainingthings.jpg 200w,
https://janmonschke.com/static/69d89d3110363aa4cbbc462f95eb11bc/4cda9/chriswilsonexplainingthings.jpg 400w,
https://janmonschke.com/static/69d89d3110363aa4cbbc462f95eb11bc/c60e9/chriswilsonexplainingthings.jpg 800w,
https://janmonschke.com/static/69d89d3110363aa4cbbc462f95eb11bc/c3413/chriswilsonexplainingthings.jpg 1024w&quot; sizes=&quot;&quot; type=&quot;image/jpeg&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/69d89d3110363aa4cbbc462f95eb11bc/c60e9/chriswilsonexplainingthings.jpg&quot; alt=&quot;Chris explaining audio&quot; title=&quot;Chris explaining audio&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;everybodyworking2.jpg&quot;&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/ad9cfbf948c710d809dd32fcbcfcd8f5/507e6/everybodyworking2.webp 200w,
https://janmonschke.com/static/ad9cfbf948c710d809dd32fcbcfcd8f5/28a80/everybodyworking2.webp 400w,
https://janmonschke.com/static/ad9cfbf948c710d809dd32fcbcfcd8f5/8d2ea/everybodyworking2.webp 800w,
https://janmonschke.com/static/ad9cfbf948c710d809dd32fcbcfcd8f5/53334/everybodyworking2.webp 1024w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/ad9cfbf948c710d809dd32fcbcfcd8f5/37402/everybodyworking2.jpg 200w,
https://janmonschke.com/static/ad9cfbf948c710d809dd32fcbcfcd8f5/4cda9/everybodyworking2.jpg 400w,
https://janmonschke.com/static/ad9cfbf948c710d809dd32fcbcfcd8f5/c60e9/everybodyworking2.jpg 800w,
https://janmonschke.com/static/ad9cfbf948c710d809dd32fcbcfcd8f5/c3413/everybodyworking2.jpg 1024w&quot; sizes=&quot;&quot; type=&quot;image/jpeg&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/ad9cfbf948c710d809dd32fcbcfcd8f5/c60e9/everybodyworking2.jpg&quot; alt=&quot;Attendees working&quot; title=&quot;Attendees working&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After several hours of hacking it was time for the presentations! We had eight groups presenting their projects and here’s the recording:&lt;/p&gt;
&lt;div class=&quot;gatsby-resp-iframe-wrapper&quot; style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem&quot;&gt; &lt;iframe class=&quot;video-embed&quot; src=&quot;//www.youtube.com/embed/atJgvEBn6qg&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; loading=&quot;lazy&quot; style=&quot; position: absolute; top: 0; left: 0; width: 100%; height: 100%; &quot;&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;p&gt;Here’s a list of all the projects that were presented if you don’t have the time to watch the entire video. If you are an attendee and you want your project link on here, please contact me on &lt;a href=&quot;https://twitter.com/thedeftone&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Jelle Akkerman (&lt;a href=&quot;https://github.com/jellea&quot;&gt;github&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/jellea&quot;&gt;twitter&lt;/a&gt;) – NoOsc was an experiment using NoFlo, trying to build something very visual and cool, super suitable for live-acts.&lt;/li&gt;
&lt;li&gt;Guillaume Marty (&lt;a href=&quot;https://github.com/gmarty&quot;&gt;github&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/g_marty&quot;&gt;twitter&lt;/a&gt;) – a BPM detection algorithm, using the OfflineAudioContext&lt;/li&gt;
&lt;li&gt;Erik Woitschig (&lt;a href=&quot;https://twitter.com/iam_bnz&quot;&gt;twitter&lt;/a&gt;) – Using SoundCloud as sample database&lt;/li&gt;
&lt;li&gt;Daniel Roth, Jonathan Lundin (&lt;a href=&quot;https://twitter.com/mr_lundis&quot;&gt;twitter&lt;/a&gt;, &lt;a href=&quot;https://github.com/mrlundis&quot;&gt;github&lt;/a&gt;), Felix Niklas (&lt;a href=&quot;https://twitter.com/mrflix&quot;&gt;twitter&lt;/a&gt;, &lt;a href=&quot;https://github.com/mrflix&quot;&gt;github&lt;/a&gt;) – Oscillator reacting to mobile phone gyroscope.&lt;/li&gt;
&lt;li&gt;Chris Greeff (&lt;a href=&quot;https://twitter.com/greevz&quot;&gt;twitter&lt;/a&gt;, &lt;a href=&quot;https://github.com/chrisgreeff&quot;&gt;github&lt;/a&gt;), Nick Lockhart (&lt;a href=&quot;https://twitter.com/nickolockhart&quot;&gt;twitter&lt;/a&gt;, &lt;a href=&quot;https://github.com/N1ck&quot;&gt;github&lt;/a&gt;) – Beaty Bird, a Flappy Bird clone that can is controlled by various audio inputs. Super Fun! – &lt;a href=&quot;https://github.com/N1ck/beaty-bird&quot;&gt;source code&lt;/a&gt; &lt;strong&gt;(Second prize)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Lisa Passing (&lt;a href=&quot;https://github.com/lislis&quot;&gt;github&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/lisapassing&quot;&gt;twitter&lt;/a&gt;) – One Hand Soundgame – &lt;a href=&quot;https://github.com/lislis/onehandsoundgame&quot;&gt;source code&lt;/a&gt; &lt;strong&gt;(Third prize)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Thomas Fett (&lt;a href=&quot;https://twitter.com/FettThomas&quot;&gt;twitter&lt;/a&gt;, &lt;a href=&quot;https://github.com/ThomasFett&quot;&gt;github&lt;/a&gt;) – Remix at once – &lt;a href=&quot;https://github.com/kollektivpp/remix-at-once&quot;&gt;source code&lt;/a&gt; &lt;strong&gt;(Fourth prize)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Evan Sonderegger (&lt;a href=&quot;https://twitter.com/esonderegger&quot;&gt;twitter&lt;/a&gt;, &lt;a href=&quot;https://github.com/esonderegger&quot;&gt;github&lt;/a&gt;) – Vector Scope in Web Audio API – &lt;a href=&quot;http://webaudiometers.rpy.xyz/#&quot;&gt;demo page&lt;/a&gt; &lt;strong&gt;(First prize)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We had three hardware prizes that were sponsored by Mozilla (&lt;a href=&quot;http://www.amazon.de/gp/product/B002M8GBDI/ref=oh_aui_detailpage_o02_s00?ie=UTF8&amp;amp;psc=1&quot;&gt;Akai LPK25&lt;/a&gt;, &lt;a href=&quot;http://www.amazon.de/gp/product/B002M8EEW8/ref=oh_aui_detailpage_o01_s00?ie=UTF8&amp;amp;psc=1&quot;&gt;Akai LPD8&lt;/a&gt;, &lt;a href=&quot;http://www.amazon.de/gp/product/B004M8YPKM/ref=oh_aui_detailpage_o00_s00?ie=UTF8&amp;amp;psc=1&quot;&gt;KORG nanoPAD2&lt;/a&gt;) and a special software price, a license for &lt;a href=&quot;https://www.bitwig.com/en/bitwig-studio/overview.html&quot;&gt;Bitwig Studio&lt;/a&gt; which was sponsored by Bitwig :)&lt;/p&gt;
&lt;p&gt;Before we announced the winners, the attendees had the chance to get their hands on the amazing dinner that was provided by Google (while Martin and me were counting votes, almost starving ;)). Afterwards we still stayed in the classroom, having some drinks, talking about audio and web development. I was very excited to see another one of my Web Audio heroes popping by for the presentations: &lt;a href=&quot;https://twitter.com/stuartmemo&quot;&gt;Stuart Memo&lt;/a&gt; &amp;lt;3&lt;/p&gt;
&lt;h3&gt;Post Scriptum&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Judging from the feedback from attendees, coaches and speakers it was an event that is definitely worth to be repeated in the near future :)&lt;/li&gt;
&lt;li&gt;One day after the Hackday in Berlin, there was the Web Music Hackday in Tokyo. We exchanged ideas when we were preparing the event and it looks like their event was a huge success and much bigger than the one in Berlin. You can see all demos and read about it in &lt;a href=&quot;http://blog.agektmr.com/2014/09/event-report-web-music-hackathon-3.html&quot;&gt;Eiji Kitamura’s blog post&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I’m looking very much forward to the very first dedicated &lt;a href=&quot;http://wac.ircam.fr/&quot;&gt;Web Audio conference in January in Paris&lt;/a&gt;. If you’re a web audio developer or interested in the API, you should definitely join.&lt;/li&gt;
&lt;li&gt;Soledad wrote a very good blog post about the event on &lt;a href=&quot;http://soledadpenades.com/2014/09/26/berlin-web-audio-hack-day-2014/&quot;&gt;her blog as well&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We semi-announced an “official” Web Audio (community) logo made by &lt;a href=&quot;https://twitter.com/woodworker&quot;&gt;Martin&lt;/a&gt;: &lt;img src=&quot;https://prolope.de/svg/webaudio-js.svg&quot; alt=&quot;web audio logo&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</content:encoded></item><item><title><![CDATA[JavaScript in University]]></title><description><![CDATA[This is a post about my personal opinion of how underrated web development is in universities at the moment. It represents only what I…]]></description><link>https://janmonschke.com/blog/2013/01/06/Javascript-in-university.html</link><guid isPermaLink="false">https://janmonschke.com/blog/2013/01/06/Javascript-in-university.html</guid><pubDate>Sun, 06 Jan 2013 00:00:00 GMT</pubDate><content:encoded>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This is a post about my personal opinion of how underrated web development is in universities at the moment. It represents only what I experienced in my Bachelor (Düsseldorf, Germany) and Master (Berlin, Germany) studies. Maybe the status quo is different in other universities, maybe it is the same everywhere else, I simply don’t know. But I don’t want it to stay like that.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you experienced something completely different or if you are in the same situation, please let me know in the comments (far ;) ) below.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;When I started my Master’s studies at HTW Berlin in 2011 I was already fully web-focused. All my side-projects and freelance jobs where web-related. Even my &lt;a href=&quot;https://github.com/janmonschke/Bachelor-Thesis/raw/master/Design%20and%20Implementation%20of%20a%20web-based%20platform%20to%20present%20designer-portfolios_CP.pdf&quot;&gt;Bachelor Thesis&lt;/a&gt; was 100% web and I tried to do as many web courses.
I came to HTW Berlin in order to focus even more on web technology since they’re offering a web-specialization in their &lt;a href=&quot;http://imi-master.htw-berlin.de/informieren/&quot;&gt;Master’s program&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unluckily, the professor, who was mainly doing all the web courses, got an offer from another university and went away before I came to Berlin. As a result we had substitute professors in most of the web courses.&lt;/p&gt;
&lt;p&gt;In general I was surprised by how few we had to code in the web-courses. In half of them we even didn’t have to code at all: Didactics and Media Engineering (I still don’t understand why they chose these courses for web students…). So I ended up having to bring JavaScript and other Web Technologies into my studies on my own.&lt;/p&gt;
&lt;h3&gt;JavaScript the silver bullet&lt;/h3&gt;
&lt;p&gt;The non-web courses, on the other hand, were completely different. We had to code a lot and in many different languages (Java, C#, C++). Even though we were always supposed to solve the tasks in specific languages, we could always argue the profs to let us use the language of our choice.&lt;/p&gt;
&lt;p&gt;In ‘Programming’ we started off with C++ and had to solve some maximum substring-matching problem in DNA-strings. I have to admit that I suck at C++. To me, all the pointer and referencing stuff always stands in the way and I find it hard to concentrate on the main problem.&lt;/p&gt;
&lt;p&gt;I was lucky to have Felix (&lt;a href=&quot;http://twitter.com/mrflix&quot;&gt;@mrflix&lt;/a&gt;) in my team in that course (actually we were flat mates at that time) so that it was not only me suffering from C++ ;). Instead of struggling with the lack of C++-skills, both coming from a web-background, we immediately started to implement the algorithm in JavaScript and it took us just some hours to get very good results. Unfortunately we were forced to provide a C++ solution to the problem but it didn’t take us long from a working JavaScript solution to a working C++ solution. Once we had an idea how to tackle the problem and we were able to formulate the problem in a language we were fluent in, it was all much easier for us.&lt;/p&gt;
&lt;p&gt;It was not the last time we were using JavaScript in that course. The last task was to develop a GUI-project in C# and we came up with the idea of creating an Instapaper client. The Instapaper API was easy to use and also C# as a language wasn’t as bad as we expected it to be (once we’d found out about delegates and all that nice stuff ;) ). But there was one thing that really simply refused to work: OAuth!&lt;/p&gt;
&lt;h4&gt;JavaScript to the rescue&lt;/h4&gt;
&lt;p&gt;None of the C#-OAuth libraries we found created the correct hashes for the Instapaper API and we almost gave up. Since I worked with OAuth before in JavaScript I had the idea to somehow do the hashing with a JavaScript library. But it’s not as easy to run JavaScript in C# as we thought, so we came up with a little hack. The .NET framework provides as WebView element which is able to display HTML pages and run the JavaScript they contain. Now every time we had to create new hashes we rendered the WebView, injected the necessary information into it, called our little OAuth-script which then returned the correct hashes. (&lt;a href=&quot;https://github.com/janmonschke/InstaBlitz/blob/master/InstaBlitz/OAuthHelper.cs&quot;&gt;OAuthHelper.cs&lt;/a&gt;, &lt;a href=&quot;https://github.com/janmonschke/InstaBlitz/blob/master/InstaBlitz/htmlshizzle/oauth-signatur-manizzle.html&quot;&gt;oauth-signature.html&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;After trying to make it work with one of the bloated and complicated C# libraries, it took us only an hour and ~20 lines of JavaScript with the WebView hack. Want to try the hack for yourself? We published the InstaPaper client on Github: &lt;a href=&quot;https://github.com/janmonschke/InstaBlitz&quot;&gt;https://github.com/janmonschke/InstaBlitz&lt;/a&gt; (We haven’t touched the code for a year now, so no guarantee that it’s still working. Also the OAuth-keys have expired.)&lt;/p&gt;
&lt;h3&gt;Canvas &amp;gt; Java&lt;/h3&gt;
&lt;p&gt;Two other courses in which the profs were open to JavaScript were ‘Image Processing’ and ‘Computer Vision’. Typically all tasks would have been solved with Java and in some special cases in C#, but the prof never had students who wanted to solve it in JavaScript. Also he thought it could not be done in JavaScript completely since it needed a lot of CPU power and also access to raw image data (he didn’t know that you can now access raw image data using canvas).&lt;/p&gt;
&lt;p&gt;The goal of the ‘Image Processing’ course was to write a program that could vectorize an input image. Each task during the semester would add a new step to the process so that we’d have the complete algorithm by the end of the semester.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/878a8b6344176459b9594bf4af950e66/507e6/binarization.webp 200w,
https://janmonschke.com/static/878a8b6344176459b9594bf4af950e66/28a80/binarization.webp 400w,
https://janmonschke.com/static/878a8b6344176459b9594bf4af950e66/8d2ea/binarization.webp 800w,
https://janmonschke.com/static/878a8b6344176459b9594bf4af950e66/a1e55/binarization.webp 827w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/878a8b6344176459b9594bf4af950e66/36ca5/binarization.png 200w,
https://janmonschke.com/static/878a8b6344176459b9594bf4af950e66/a3397/binarization.png 400w,
https://janmonschke.com/static/878a8b6344176459b9594bf4af950e66/a331c/binarization.png 800w,
https://janmonschke.com/static/878a8b6344176459b9594bf4af950e66/c6a49/binarization.png 827w&quot; sizes=&quot;&quot; type=&quot;image/png&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/878a8b6344176459b9594bf4af950e66/a331c/binarization.png&quot; alt=&quot;Binarization&quot; title=&quot;Binarization&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;
&lt;a href=&quot;https://janmonschke.com/Image-Processing-with-HTML5-Canvas/Ue01-Monschke-Jan&quot;&gt;Try out the demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Above you see the first exercise, two simple binarization algorithms for images.&lt;/p&gt;
&lt;p&gt;It was a fun course because it was something I never did before in my Bachelor studies. Also it felt like very low-level development, although all the code was written in JavaScript (or in my case in CoffeeScript). Sadly, I stopped doing the exercises in CoffeeScript after some time because my prof didn’t like its syntax and already had a hard time to understand JavaScript. For the last exercises I switched to Java afterwards, which also was a &lt;em&gt;fun&lt;/em&gt; experience after so many years with Ruby, JS, Python and CoffeeScript ;)&lt;/p&gt;
&lt;h3&gt;Canvas Filters&lt;/h3&gt;
&lt;p&gt;‘Computer Vision’ also was a course that dealt with calculations on image data and its aim was to write algorithms that could detect objects semantically in images. E.g. it should say that there’s a duck on the image if you’d show it an image of a duck swimming in a pond.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://janmonschke.com/ComputerVision/01_Edge_Detection&quot;&gt;&lt;picture&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/2c7f89a8517678877ae531bfaa4f7941/507e6/edge-detection.webp 200w,
https://janmonschke.com/static/2c7f89a8517678877ae531bfaa4f7941/28a80/edge-detection.webp 400w,
https://janmonschke.com/static/2c7f89a8517678877ae531bfaa4f7941/8d2ea/edge-detection.webp 800w,
https://janmonschke.com/static/2c7f89a8517678877ae531bfaa4f7941/294ed/edge-detection.webp 902w&quot; sizes=&quot;&quot; type=&quot;image/webp&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;source srcset=&quot;https://janmonschke.com/static/2c7f89a8517678877ae531bfaa4f7941/36ca5/edge-detection.png 200w,
https://janmonschke.com/static/2c7f89a8517678877ae531bfaa4f7941/a3397/edge-detection.png 400w,
https://janmonschke.com/static/2c7f89a8517678877ae531bfaa4f7941/a331c/edge-detection.png 800w,
https://janmonschke.com/static/2c7f89a8517678877ae531bfaa4f7941/e56b9/edge-detection.png 902w&quot; sizes=&quot;&quot; type=&quot;image/png&quot; style=&quot;max-width: 100%&quot;&gt;
          &lt;img class=&quot;gatsby-resp-image-image&quot; src=&quot;https://janmonschke.com/static/2c7f89a8517678877ae531bfaa4f7941/a331c/edge-detection.png&quot; alt=&quot;Edge detection&quot; title=&quot;Edge detection&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%&quot; sizes=&quot;&quot;&gt;
        &lt;/picture&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Above you see the first exercise, the first steps towards edge detection with different filters.&lt;/p&gt;
&lt;p&gt;I was able to use typed-Arrays in JavaScript for the first time, before that I barely knew about them and I was pretty amazed by how much faster they made the whole application.&lt;/p&gt;
&lt;h2&gt;The bad parts&lt;/h2&gt;
&lt;p&gt;In general I have to say that I’m disappointed by the lack of coding in web courses and that lack of knowledge about current web technology in courses like ‘Web Applications’. A Master course that teaches the basics of PHP, HTML, CSS and almost no JavaScript. In my opinion this is way too basic for a Master course and the knowledge of these things should be requirement in order to enroll in a Master’s web course.&lt;/p&gt;
&lt;p&gt;I don’t want to repeat myself or rage about the negative parts here, they’re all mentioned above, so let’s switch to the &lt;strong&gt;good parts:&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;The good parts&lt;/h2&gt;
&lt;p&gt;Despite my disappointment, my overall ‘Master experience’ is positive. I was able to learn new things by using JavaScript in fields which it wasn’t (originally) designed for. I may not have been able to program web stuff in the web courses, but therefore I did it even more in the other courses and in project-courses, where students can choose projects on their own. Currently I’m working on a huge web project with Felix in cooperation with &lt;a href=&quot;http://transparency.org&quot;&gt;Transparency International&lt;/a&gt; and &lt;a href=&quot;http://htw-berlin.de&quot;&gt;HTW Berlin&lt;/a&gt;. We were given the chance to completely decide on the development stack with maximum freedom which led to our first mid-scale node.js project with a Backbone.js frontend. (More info on the project when it’s done ;) ).&lt;/p&gt;
&lt;p&gt;But still, the status quo is very unsatisfying and I don’t want future-students to experience the same disappointing web courses. In summer 2012 I met Simon (&lt;a href=&quot;https://twitter.com/sjockers&quot;&gt;@sjockers&lt;/a&gt;), who was at that time a Master student and Bachelor lecteror at the same time, teaching web development to Bachelor students. After some &lt;a href=&quot;http://berlinjs.org&quot;&gt;Berlin.js&lt;/a&gt; meetups, he came up with the idea to make an own uni course which should be specifically for all web-interested students.&lt;/p&gt;
&lt;p&gt;The idea for the course spread quickly among the web students at my uni and in our first meeting, right before a Berlin.js meetup of course, we laid down the foundation for the course by &lt;a href=&quot;https://gist.github.com/4170211&quot;&gt;brainstorming topics&lt;/a&gt; and discussing organizational stuff. Even though we did not announce anything in uni, 8 students showed up, who were all eager to change something. According to the great feedback we got after the meeting, it looks like JavaScript will have a bright future at (our) university. Simon convinced a professor to allow us to create an additional course in the next semester, the first step is done! :)&lt;/p&gt;
&lt;p&gt;The key is, that as a student you have the freedom to choose &lt;strong&gt;what&lt;/strong&gt; you learn and, more importantly, &lt;strong&gt;how&lt;/strong&gt; you learn it. Of course, it’s always easier to just stick to the agenda and do what the profs say. But the benefits of going your own way are worth every extra-hour spent! There is so much more to learn which is not in the curriculum!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content:encoded></item><item><title><![CDATA[Backbone-couchdb - Give your couchapp some Backbone!]]></title><description><![CDATA[The code and information about the library in this article may be out of date since this article is pretty old now and was written when the…]]></description><link>https://janmonschke.com/blog/2010/11/12/backbone-couchdb-Give-your-couchapp-some-backbone.html</link><guid isPermaLink="false">https://janmonschke.com/blog/2010/11/12/backbone-couchdb-Give-your-couchapp-some-backbone.html</guid><pubDate>Fri, 12 Nov 2010 00:00:00 GMT</pubDate><content:encoded>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;strong&gt;The code and information about the library in this article may be out of date since this article is pretty old now and was written when the library was first released. Check the &lt;a href=&quot;/projects/backbone-couchdb.html&quot;&gt;project page&lt;/a&gt; for a more updated description.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recently I read a lot about CouchDB, couchapps and Backbone.js and I really liked the way you can create apps with these tools. To combine them I created a connector for Backbone that syncs your Backbone app to your CouchDB. The source is available on &lt;a href=&quot;https://github.com/janmonschke/backbone-couchdb&quot;&gt;Github&lt;/a&gt; and an example couchapp is hosted at &lt;a href=&quot;https://backbone.couchone.com/backbone-couchapp/_design/backbone-couchapp/index.html&quot;&gt;couchone&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vote it up on Hackernews if you like it: &lt;a href=&quot;https://news.ycombinator.com/item?id=1898726&quot;&gt;vote&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is the description that I also published on Github:&lt;/p&gt;
&lt;h2&gt;backbone-couchdb&lt;/h2&gt;
&lt;p&gt;This is a Backbone connector that overrides the default sync-behavior Backbone and connects your app to your &lt;a href=&quot;https://github.com/apache/couchdb&quot;&gt;CouchDB&lt;/a&gt; so that you can &lt;a href=&quot;https://vimeo.com/11852209&quot;&gt;RELAX&lt;/a&gt; and don’t need to worry about server-side code.&lt;/p&gt;
&lt;h3&gt;Why a new connector?&lt;/h3&gt;
&lt;p&gt;I developed this connector because I didn’t want to write a whole new server that persists
the models that Backbone.js creates. Instead of writing a server I now only have to write a simple design document
containing one simple view and I’m done with server-side code and can fully concentrate on my Backbone App.&lt;/p&gt;
&lt;p&gt;Also I wanted to get real time updates when my models are changed on the server (e.g. by a second user). The CouchDB changes-feed seemed
like a perfect match for this problem.&lt;/p&gt;
&lt;h3&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;All Backbone apps should work normally without any changes. Simply include &lt;code class=&quot;language-text&quot;&gt;backbone-couchdb.js&lt;/code&gt; with its dependencies into your project and configure the connector with your database infos.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Backbone&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;couchConnector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;databaseName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;backbone-couchapp&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Backbone&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;couchConnector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ddocName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;backbone-couchapp&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Backbone&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;couchConnector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;viewName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;byCollection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Backbone&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;couchConnector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;enableChanges &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see you also need to create a new database in your CouchDB and a new design document that contains the following view:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;doc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;collection&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;doc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;collection&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; doc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you set &lt;code class=&quot;language-text&quot;&gt;Backbone.couchConnector.enableChanges&lt;/code&gt; to true, the connector will update your models with remote changes in near real time.&lt;/p&gt;
&lt;h3&gt;Give your &lt;a href=&quot;https://github.com/couchapp/couchapp&quot;&gt;couchapp&lt;/a&gt; some backbone&lt;/h3&gt;
&lt;p&gt;An easy way to host single-page apps is to enclose them in a couchapp. I included a sample couchapp project to show you how to create
couchapps with backbone and this CouchDB connector. Also there is a step by step tutorial located in the &lt;a href=&quot;https://github.com/janmonschke/backbone-couchdb/blob/master/backbone-couchapp/README.md&quot;&gt;readme of the couchapp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is an instance of this couchapp running on &lt;a href=&quot;https://backbone.couchone.com/backbone-couchapp/_design/backbone-couchapp/index.html&quot;&gt;couchone&lt;/a&gt; and I uploaded a file with the &lt;a href=&quot;https://janmonschke.github.com/backbone-couchdb/app.html&quot;&gt;annotated source&lt;/a&gt; of the app. (Created with &lt;a href=&quot;https://github.com/jashkenas/docco&quot;&gt;docco&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/documentcloud/backbone&quot;&gt;Backbone.js&lt;/a&gt; and therefore &lt;a href=&quot;https://github.com/documentcloud/underscore&quot;&gt;Underscore.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/couchdb/blob/trunk/share/www/script/jquery.couch.js&quot;&gt;jquery.couch.js&lt;/a&gt; and therefore &lt;a href=&quot;https://www.jquery.com/&quot;&gt;jQuery&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Learn more&lt;/h3&gt;
&lt;p&gt;To show how backbone-couchdb works under the hood I created an annotated source file located &lt;a href=&quot;https://janmonschke.github.com/backbone-couchdb/backbone-couchdb.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content:encoded></item></channel></rss>